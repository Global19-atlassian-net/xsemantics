/*
 * generated by Xtext 2.20.0
 */
package org.eclipse.xsemantics.example.expressions.ui.wizard


import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class ExpressionsProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new HelloWorldProject]
	}
}

@ProjectTemplate(label="Expressions Example", icon="project_template.png", description="<p><b>Expressions Example</b></p>
<p>An example of Expressions DSL (whose type system is implemented with Xsemantics).</p>")
final class HelloWorldProject {
	val advanced = check("Advanced:", false)
	val advancedGroup = group("Properties")
	val path = text("Package:", "expressions", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		path.enabled = advanced.value
		if (!advanced.value) {
			path.value = "expressions"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			folders += #["src", "src-gen"]
			addFile('''src/«path»/Example.expressions''', '''
				/*
				 * This is an example file for expressions DSL;
				 * You'll have an .output file automatically generated in
				 * ../src-gen/Example.output
				 * With type information and evaluation of expressions
				 */
				
				// arithmetic expression
				i = 10 - 5 * 1
				
				// you can refer to previously defined variables
				j = i * i / 20
				
				// you can concatenate strings with numbers (automatically converted) 
				s = 'foo' + 5
				
				// string constants are converted to numbers when requested
				p = (5 * j) - (i + '100')
				
				// string constants are converted to booleans when requested
				c = (p < j) && ('true')
				
				// this will evaluate to true
				d = (p < j) && ('f0' == ('f' + 0))
				
				// try yourself :)
			''')
		])
	}
}
