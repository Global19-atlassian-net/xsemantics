/*
* generated by Xtext
*/
package it.xsemantics.example.fj.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FJGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClassesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClassesClassParserRuleCall_0_0 = (RuleCall)cClassesAssignment_0.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainExpressionParserRuleCall_1_0 = (RuleCall)cMainAssignment_1.eContents().get(0);
		
		//Program:
		//	classes+=Class* main=Expression?;
		public ParserRule getRule() { return rule; }

		//classes+=Class* main=Expression?
		public Group getGroup() { return cGroup; }

		//classes+=Class*
		public Assignment getClassesAssignment_0() { return cClassesAssignment_0; }

		//Class
		public RuleCall getClassesClassParserRuleCall_0_0() { return cClassesClassParserRuleCall_0_0; }

		//main=Expression?
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }

		//Expression
		public RuleCall getMainExpressionParserRuleCall_1_0() { return cMainExpressionParserRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	BasicType | ClassType;
		public ParserRule getRule() { return rule; }

		//BasicType | ClassType
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_0() { return cBasicTypeParserRuleCall_0; }

		//ClassType
		public RuleCall getClassTypeParserRuleCall_1() { return cClassTypeParserRuleCall_1; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Assignment cBasicAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBasicAlternatives_0 = (Alternatives)cBasicAssignment.eContents().get(0);
		private final Keyword cBasicIntKeyword_0_0 = (Keyword)cBasicAlternatives_0.eContents().get(0);
		private final Keyword cBasicBooleanKeyword_0_1 = (Keyword)cBasicAlternatives_0.eContents().get(1);
		private final Keyword cBasicStringKeyword_0_2 = (Keyword)cBasicAlternatives_0.eContents().get(2);
		
		//BasicType:
		//	basic=("int" | "boolean" | "String");
		public ParserRule getRule() { return rule; }

		//basic=("int" | "boolean" | "String")
		public Assignment getBasicAssignment() { return cBasicAssignment; }

		//"int" | "boolean" | "String"
		public Alternatives getBasicAlternatives_0() { return cBasicAlternatives_0; }

		//"int"
		public Keyword getBasicIntKeyword_0_0() { return cBasicIntKeyword_0_0; }

		//"boolean"
		public Keyword getBasicBooleanKeyword_0_1() { return cBasicBooleanKeyword_0_1; }

		//"String"
		public Keyword getBasicStringKeyword_0_2() { return cBasicStringKeyword_0_2; }
	}

	public class ClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassType");
		private final Assignment cClassrefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cClassrefClassCrossReference_0 = (CrossReference)cClassrefAssignment.eContents().get(0);
		private final RuleCall cClassrefClassIDTerminalRuleCall_0_1 = (RuleCall)cClassrefClassCrossReference_0.eContents().get(1);
		
		//ClassType:
		//	classref=[Class];
		public ParserRule getRule() { return rule; }

		//classref=[Class]
		public Assignment getClassrefAssignment() { return cClassrefAssignment; }

		//[Class]
		public CrossReference getClassrefClassCrossReference_0() { return cClassrefClassCrossReference_0; }

		//ID
		public RuleCall getClassrefClassIDTerminalRuleCall_0_1() { return cClassrefClassIDTerminalRuleCall_0_1; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperclassAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperclassClassCrossReference_2_1_0 = (CrossReference)cSuperclassAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperclassClassIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperclassClassCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersMemberParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Class:
		//	"class" name=ID ("extends" superclass=[Class])? "{" members+=Member* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ID ("extends" superclass=[Class])? "{" members+=Member* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superclass=[Class])?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superclass=[Class]
		public Assignment getSuperclassAssignment_2_1() { return cSuperclassAssignment_2_1; }

		//[Class]
		public CrossReference getSuperclassClassCrossReference_2_1_0() { return cSuperclassClassCrossReference_2_1_0; }

		//ID
		public RuleCall getSuperclassClassIDTerminalRuleCall_2_1_0_1() { return cSuperclassClassIDTerminalRuleCall_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//members+=Member*
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_4_0() { return cMembersMemberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Member:
		//	Field | Method;
		public ParserRule getRule() { return rule; }

		//Field | Method
		public Alternatives getAlternatives() { return cAlternatives; }

		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }

		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Field:
		//	type=Type name=ID ";";
		public ParserRule getRule() { return rule; }

		//type=Type name=ID ";"
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyMethodBodyParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Method:
		//	type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}";
		public ParserRule getRule() { return rule; }

		//type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}"
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_0_0() { return cParamsParameterParserRuleCall_3_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_3_1_1_0() { return cParamsParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//body=MethodBody
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//MethodBody
		public RuleCall getBodyMethodBodyParserRuleCall_6_0() { return cBodyMethodBodyParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//type=Type name=ID
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TypedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemberParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypedElement:
		//	Member | Parameter;
		public ParserRule getRule() { return rule; }

		//Member | Parameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//Member
		public RuleCall getMemberParserRuleCall_0() { return cMemberParserRuleCall_0; }

		//Parameter
		public RuleCall getParameterParserRuleCall_1() { return cParameterParserRuleCall_1; }
	}

	public class MethodBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MethodBody:
		//	"return" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//"return" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSelectionReceiverAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cMessageAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final CrossReference cMessageMemberCrossReference_1_0_2_0 = (CrossReference)cMessageAssignment_1_0_2.eContents().get(0);
		private final RuleCall cMessageMemberIDTerminalRuleCall_1_0_2_0_1 = (RuleCall)cMessageMemberCrossReference_1_0_2_0.eContents().get(1);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Group cGroup_1_0_3_1 = (Group)cGroup_1_0_3.eContents().get(1);
		private final Assignment cArgsAssignment_1_0_3_1_0 = (Assignment)cGroup_1_0_3_1.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_1_0_3_1_0_0 = (RuleCall)cArgsAssignment_1_0_3_1_0.eContents().get(0);
		private final Group cGroup_1_0_3_1_1 = (Group)cGroup_1_0_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_3_1_1_0 = (Keyword)cGroup_1_0_3_1_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_0_3_1_1_1 = (Assignment)cGroup_1_0_3_1_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_0_3_1_1_1_0 = (RuleCall)cArgsAssignment_1_0_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3_2 = (Keyword)cGroup_1_0_3.eContents().get(2);
		
		//Expression:
		//	TerminalExpression => ({Selection.receiver=current} "." message=[Member] ("(" (args+=Expression (","
		//	args+=Expression)*)? ")")?)*;
		public ParserRule getRule() { return rule; }

		//TerminalExpression => ({Selection.receiver=current} "." message=[Member] ("(" (args+=Expression (","
		//args+=Expression)*)? ")")?)*
		public Group getGroup() { return cGroup; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//=> ({Selection.receiver=current} "." message=[Member] ("(" (args+=Expression ("," args+=Expression)*)? ")")?)*
		public Group getGroup_1() { return cGroup_1; }

		//{Selection.receiver=current} "." message=[Member] ("(" (args+=Expression ("," args+=Expression)*)? ")")?
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Selection.receiver=current}
		public Action getSelectionReceiverAction_1_0_0() { return cSelectionReceiverAction_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_0_1() { return cFullStopKeyword_1_0_1; }

		//message=[Member]
		public Assignment getMessageAssignment_1_0_2() { return cMessageAssignment_1_0_2; }

		//[Member]
		public CrossReference getMessageMemberCrossReference_1_0_2_0() { return cMessageMemberCrossReference_1_0_2_0; }

		//ID
		public RuleCall getMessageMemberIDTerminalRuleCall_1_0_2_0_1() { return cMessageMemberIDTerminalRuleCall_1_0_2_0_1; }

		//("(" (args+=Expression ("," args+=Expression)*)? ")")?
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_3_0() { return cLeftParenthesisKeyword_1_0_3_0; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_1_0_3_1() { return cGroup_1_0_3_1; }

		//args+=Expression
		public Assignment getArgsAssignment_1_0_3_1_0() { return cArgsAssignment_1_0_3_1_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_0_3_1_0_0() { return cArgsExpressionParserRuleCall_1_0_3_1_0_0; }

		//("," args+=Expression)*
		public Group getGroup_1_0_3_1_1() { return cGroup_1_0_3_1_1; }

		//","
		public Keyword getCommaKeyword_1_0_3_1_1_0() { return cCommaKeyword_1_0_3_1_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_0_3_1_1_1() { return cArgsAssignment_1_0_3_1_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_0_3_1_1_1_0() { return cArgsExpressionParserRuleCall_1_0_3_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_3_2() { return cRightParenthesisKeyword_1_0_3_2; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cThisParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParamRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNewParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCastParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cConstantParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cParenParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TerminalExpression returns Expression:
		//	This | ParamRef | New | => Cast | Constant | Paren;
		public ParserRule getRule() { return rule; }

		//This | ParamRef | New | => Cast | Constant | Paren
		public Alternatives getAlternatives() { return cAlternatives; }

		//This
		public RuleCall getThisParserRuleCall_0() { return cThisParserRuleCall_0; }

		//ParamRef
		public RuleCall getParamRefParserRuleCall_1() { return cParamRefParserRuleCall_1; }

		//New
		public RuleCall getNewParserRuleCall_2() { return cNewParserRuleCall_2; }

		//=> Cast
		public RuleCall getCastParserRuleCall_3() { return cCastParserRuleCall_3; }

		//Constant
		public RuleCall getConstantParserRuleCall_4() { return cConstantParserRuleCall_4; }

		//Paren
		public RuleCall getParenParserRuleCall_5() { return cParenParserRuleCall_5; }
	}

	public class ThisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "This");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cVariableThisKeyword_0 = (Keyword)cVariableAssignment.eContents().get(0);
		
		//This:
		//	variable="this";
		public ParserRule getRule() { return rule; }

		//variable="this"
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//"this"
		public Keyword getVariableThisKeyword_0() { return cVariableThisKeyword_0; }
	}

	public class ParamRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamRef");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_0 = (CrossReference)cParameterAssignment.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_0_1 = (RuleCall)cParameterParameterCrossReference_0.eContents().get(1);
		
		//ParamRef:
		//	parameter=[Parameter];
		public ParserRule getRule() { return rule; }

		//parameter=[Parameter]
		public Assignment getParameterAssignment() { return cParameterAssignment; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_0() { return cParameterParameterCrossReference_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_0_1() { return cParameterParameterIDTerminalRuleCall_0_1; }
	}

	public class NewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "New");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//New:
		//	"new" type=ClassType "(" (args+=Expression ("," args+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//"new" type=ClassType "(" (args+=Expression ("," args+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }

		//type=ClassType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassType
		public RuleCall getTypeClassTypeParserRuleCall_1_0() { return cTypeClassTypeParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(args+=Expression ("," args+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//args+=Expression
		public Assignment getArgsAssignment_3_0() { return cArgsAssignment_3_0; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_0_0() { return cArgsExpressionParserRuleCall_3_0_0; }

		//("," args+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//args+=Expression
		public Assignment getArgsAssignment_3_1_1() { return cArgsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_3_1_1_0() { return cArgsExpressionParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class CastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionTerminalExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//Cast:
		//	"(" type=ClassType ")" expression=TerminalExpression;
		public ParserRule getRule() { return rule; }

		//"(" type=ClassType ")" expression=TerminalExpression
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//type=ClassType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassType
		public RuleCall getTypeClassTypeParserRuleCall_1_0() { return cTypeClassTypeParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//expression=TerminalExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//TerminalExpression
		public RuleCall getExpressionTerminalExpressionParserRuleCall_3_0() { return cExpressionTerminalExpressionParserRuleCall_3_0; }
	}

	public class ParenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Paren");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Paren returns Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringConstantParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constant:
		//	IntConstant | BoolConstant | StringConstant;
		public ParserRule getRule() { return rule; }

		//IntConstant | BoolConstant | StringConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntConstant
		public RuleCall getIntConstantParserRuleCall_0() { return cIntConstantParserRuleCall_0; }

		//BoolConstant
		public RuleCall getBoolConstantParserRuleCall_1() { return cBoolConstantParserRuleCall_1; }

		//StringConstant
		public RuleCall getStringConstantParserRuleCall_2() { return cStringConstantParserRuleCall_2; }
	}

	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstantSTRINGTerminalRuleCall_0 = (RuleCall)cConstantAssignment.eContents().get(0);
		
		//StringConstant:
		//	constant=STRING;
		public ParserRule getRule() { return rule; }

		//constant=STRING
		public Assignment getConstantAssignment() { return cConstantAssignment; }

		//STRING
		public RuleCall getConstantSTRINGTerminalRuleCall_0() { return cConstantSTRINGTerminalRuleCall_0; }
	}

	public class IntConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConstantINTTerminalRuleCall_0 = (RuleCall)cConstantAssignment.eContents().get(0);
		
		//IntConstant:
		//	constant=INT;
		public ParserRule getRule() { return rule; }

		//constant=INT
		public Assignment getConstantAssignment() { return cConstantAssignment; }

		//INT
		public RuleCall getConstantINTTerminalRuleCall_0() { return cConstantINTTerminalRuleCall_0; }
	}

	public class BoolConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolConstant");
		private final Assignment cConstantAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cConstantAlternatives_0 = (Alternatives)cConstantAssignment.eContents().get(0);
		private final Keyword cConstantTrueKeyword_0_0 = (Keyword)cConstantAlternatives_0.eContents().get(0);
		private final Keyword cConstantFalseKeyword_0_1 = (Keyword)cConstantAlternatives_0.eContents().get(1);
		
		//BoolConstant:
		//	constant=("true" | "false");
		public ParserRule getRule() { return rule; }

		//constant=("true" | "false")
		public Assignment getConstantAssignment() { return cConstantAssignment; }

		//"true" | "false"
		public Alternatives getConstantAlternatives_0() { return cConstantAlternatives_0; }

		//"true"
		public Keyword getConstantTrueKeyword_0_0() { return cConstantTrueKeyword_0_0; }

		//"false"
		public Keyword getConstantFalseKeyword_0_1() { return cConstantFalseKeyword_0_1; }
	}
	
	
	private ProgramElements pProgram;
	private TypeElements pType;
	private BasicTypeElements pBasicType;
	private ClassTypeElements pClassType;
	private ClassElements pClass;
	private MemberElements pMember;
	private FieldElements pField;
	private MethodElements pMethod;
	private ParameterElements pParameter;
	private TypedElementElements pTypedElement;
	private MethodBodyElements pMethodBody;
	private ExpressionElements pExpression;
	private TerminalExpressionElements pTerminalExpression;
	private ThisElements pThis;
	private ParamRefElements pParamRef;
	private NewElements pNew;
	private CastElements pCast;
	private ParenElements pParen;
	private ConstantElements pConstant;
	private StringConstantElements pStringConstant;
	private IntConstantElements pIntConstant;
	private BoolConstantElements pBoolConstant;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FJGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.xsemantics.example.fj.FJ".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	classes+=Class* main=Expression?;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Type:
	//	BasicType | ClassType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//BasicType:
	//	basic=("int" | "boolean" | "String");
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//ClassType:
	//	classref=[Class];
	public ClassTypeElements getClassTypeAccess() {
		return (pClassType != null) ? pClassType : (pClassType = new ClassTypeElements());
	}
	
	public ParserRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}

	//Class:
	//	"class" name=ID ("extends" superclass=[Class])? "{" members+=Member* "}";
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Member:
	//	Field | Method;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Field:
	//	type=Type name=ID ";";
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Method:
	//	type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" body=MethodBody "}";
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//Parameter:
	//	type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//TypedElement:
	//	Member | Parameter;
	public TypedElementElements getTypedElementAccess() {
		return (pTypedElement != null) ? pTypedElement : (pTypedElement = new TypedElementElements());
	}
	
	public ParserRule getTypedElementRule() {
		return getTypedElementAccess().getRule();
	}

	//MethodBody:
	//	"return" expression=Expression ";";
	public MethodBodyElements getMethodBodyAccess() {
		return (pMethodBody != null) ? pMethodBody : (pMethodBody = new MethodBodyElements());
	}
	
	public ParserRule getMethodBodyRule() {
		return getMethodBodyAccess().getRule();
	}

	//Expression:
	//	TerminalExpression => ({Selection.receiver=current} "." message=[Member] ("(" (args+=Expression (","
	//	args+=Expression)*)? ")")?)*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//TerminalExpression returns Expression:
	//	This | ParamRef | New | => Cast | Constant | Paren;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//This:
	//	variable="this";
	public ThisElements getThisAccess() {
		return (pThis != null) ? pThis : (pThis = new ThisElements());
	}
	
	public ParserRule getThisRule() {
		return getThisAccess().getRule();
	}

	//ParamRef:
	//	parameter=[Parameter];
	public ParamRefElements getParamRefAccess() {
		return (pParamRef != null) ? pParamRef : (pParamRef = new ParamRefElements());
	}
	
	public ParserRule getParamRefRule() {
		return getParamRefAccess().getRule();
	}

	//New:
	//	"new" type=ClassType "(" (args+=Expression ("," args+=Expression)*)? ")";
	public NewElements getNewAccess() {
		return (pNew != null) ? pNew : (pNew = new NewElements());
	}
	
	public ParserRule getNewRule() {
		return getNewAccess().getRule();
	}

	//Cast:
	//	"(" type=ClassType ")" expression=TerminalExpression;
	public CastElements getCastAccess() {
		return (pCast != null) ? pCast : (pCast = new CastElements());
	}
	
	public ParserRule getCastRule() {
		return getCastAccess().getRule();
	}

	//Paren returns Expression:
	//	"(" Expression ")";
	public ParenElements getParenAccess() {
		return (pParen != null) ? pParen : (pParen = new ParenElements());
	}
	
	public ParserRule getParenRule() {
		return getParenAccess().getRule();
	}

	//Constant:
	//	IntConstant | BoolConstant | StringConstant;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//StringConstant:
	//	constant=STRING;
	public StringConstantElements getStringConstantAccess() {
		return (pStringConstant != null) ? pStringConstant : (pStringConstant = new StringConstantElements());
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}

	//IntConstant:
	//	constant=INT;
	public IntConstantElements getIntConstantAccess() {
		return (pIntConstant != null) ? pIntConstant : (pIntConstant = new IntConstantElements());
	}
	
	public ParserRule getIntConstantRule() {
		return getIntConstantAccess().getRule();
	}

	//BoolConstant:
	//	constant=("true" | "false");
	public BoolConstantElements getBoolConstantAccess() {
		return (pBoolConstant != null) ? pBoolConstant : (pBoolConstant = new BoolConstantElements());
	}
	
	public ParserRule getBoolConstantRule() {
		return getBoolConstantAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
