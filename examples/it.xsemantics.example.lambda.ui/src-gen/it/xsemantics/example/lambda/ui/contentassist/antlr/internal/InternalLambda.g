/*
* generated by Xtext
*/
grammar InternalLambda;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package it.xsemantics.example.lambda.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package it.xsemantics.example.lambda.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import it.xsemantics.example.lambda.services.LambdaGrammarAccess;

}

@parser::members {
 
 	private LambdaGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LambdaGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getTermAssignment()); }
(rule__Program__TermAssignment)
{ after(grammarAccess.getProgramAccess().getTermAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerm
entryRuleTerm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleTerm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule Term
ruleTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getGroup()); }
(rule__Term__Group__0)
{ after(grammarAccess.getTermAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalTerm
entryRuleTerminalTerm 
:
{ before(grammarAccess.getTerminalTermRule()); }
	 ruleTerminalTerm
{ after(grammarAccess.getTerminalTermRule()); } 
	 EOF 
;

// Rule TerminalTerm
ruleTerminalTerm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTerminalTermAccess().getAlternatives()); }
(rule__TerminalTerm__Alternatives)
{ after(grammarAccess.getTerminalTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstant
entryRuleConstant 
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantAccess().getAlternatives()); }
(rule__Constant__Alternatives)
{ after(grammarAccess.getConstantAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringConstant
entryRuleStringConstant 
:
{ before(grammarAccess.getStringConstantRule()); }
	 ruleStringConstant
{ after(grammarAccess.getStringConstantRule()); } 
	 EOF 
;

// Rule StringConstant
ruleStringConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringConstantAccess().getStringAssignment()); }
(rule__StringConstant__StringAssignment)
{ after(grammarAccess.getStringConstantAccess().getStringAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntConstant
entryRuleIntConstant 
:
{ before(grammarAccess.getIntConstantRule()); }
	 ruleIntConstant
{ after(grammarAccess.getIntConstantRule()); } 
	 EOF 
;

// Rule IntConstant
ruleIntConstant
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntConstantAccess().getIntAssignment()); }
(rule__IntConstant__IntAssignment)
{ after(grammarAccess.getIntConstantAccess().getIntAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArithmetics
entryRuleArithmetics 
:
{ before(grammarAccess.getArithmeticsRule()); }
	 ruleArithmetics
{ after(grammarAccess.getArithmeticsRule()); } 
	 EOF 
;

// Rule Arithmetics
ruleArithmetics
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArithmeticsAccess().getGroup()); }
(rule__Arithmetics__Group__0)
{ after(grammarAccess.getArithmeticsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getRefAssignment()); }
(rule__Variable__RefAssignment)
{ after(grammarAccess.getVariableAccess().getRefAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstraction
entryRuleAbstraction 
:
{ before(grammarAccess.getAbstractionRule()); }
	 ruleAbstraction
{ after(grammarAccess.getAbstractionRule()); } 
	 EOF 
;

// Rule Abstraction
ruleAbstraction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractionAccess().getGroup()); }
(rule__Abstraction__Group__0)
{ after(grammarAccess.getAbstractionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getGroup()); }
(rule__Type__Group__0)
{ after(grammarAccess.getTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalType
entryRuleTerminalType 
:
{ before(grammarAccess.getTerminalTypeRule()); }
	 ruleTerminalType
{ after(grammarAccess.getTerminalTypeRule()); } 
	 EOF 
;

// Rule TerminalType
ruleTerminalType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTerminalTypeAccess().getAlternatives()); }
(rule__TerminalType__Alternatives)
{ after(grammarAccess.getTerminalTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicType
entryRuleBasicType 
:
{ before(grammarAccess.getBasicTypeRule()); }
	 ruleBasicType
{ after(grammarAccess.getBasicTypeRule()); } 
	 EOF 
;

// Rule BasicType
ruleBasicType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicTypeAccess().getAlternatives()); }
(rule__BasicType__Alternatives)
{ after(grammarAccess.getBasicTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeVariable
entryRuleTypeVariable 
:
{ before(grammarAccess.getTypeVariableRule()); }
	 ruleTypeVariable
{ after(grammarAccess.getTypeVariableRule()); } 
	 EOF 
;

// Rule TypeVariable
ruleTypeVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeVariableAccess().getTypevarNameAssignment()); }
(rule__TypeVariable__TypevarNameAssignment)
{ after(grammarAccess.getTypeVariableAccess().getTypevarNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__TerminalTerm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalTermAccess().getGroup_0()); }
(rule__TerminalTerm__Group_0__0)
{ after(grammarAccess.getTerminalTermAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTerminalTermAccess().getConstantParserRuleCall_1()); }
	ruleConstant
{ after(grammarAccess.getTerminalTermAccess().getConstantParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTerminalTermAccess().getArithmeticsParserRuleCall_2()); }
	ruleArithmetics
{ after(grammarAccess.getTerminalTermAccess().getArithmeticsParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTerminalTermAccess().getVariableParserRuleCall_3()); }
	ruleVariable
{ after(grammarAccess.getTerminalTermAccess().getVariableParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getTerminalTermAccess().getAbstractionParserRuleCall_4()); }
	ruleAbstraction
{ after(grammarAccess.getTerminalTermAccess().getAbstractionParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstantAccess().getStringConstantParserRuleCall_0()); }
	ruleStringConstant
{ after(grammarAccess.getConstantAccess().getStringConstantParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstantAccess().getIntConstantParserRuleCall_1()); }
	ruleIntConstant
{ after(grammarAccess.getConstantAccess().getIntConstantParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalTypeAccess().getGroup_0()); }
(rule__TerminalType__Group_0__0)
{ after(grammarAccess.getTerminalTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTerminalTypeAccess().getBasicTypeParserRuleCall_1()); }
	ruleBasicType
{ after(grammarAccess.getTerminalTypeAccess().getBasicTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTerminalTypeAccess().getTypeVariableParserRuleCall_2()); }
	ruleTypeVariable
{ after(grammarAccess.getTerminalTypeAccess().getTypeVariableParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTypeAccess().getGroup_0()); }
(rule__BasicType__Group_0__0)
{ after(grammarAccess.getBasicTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBasicTypeAccess().getGroup_1()); }
(rule__BasicType__Group_1__0)
{ after(grammarAccess.getBasicTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Term__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__0__Impl
	rule__Term__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTerminalTermParserRuleCall_0()); }
	ruleTerminalTerm
{ after(grammarAccess.getTermAccess().getTerminalTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)*
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getGroup_1_0()); }
(rule__Term__Group_1_0__0)
{ after(grammarAccess.getTermAccess().getGroup_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Term__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_0__0__Impl
	rule__Term__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getApplicationFunAction_1_0_0()); }
(

)
{ after(grammarAccess.getTermAccess().getApplicationFunAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getArgAssignment_1_0_1()); }
(rule__Term__ArgAssignment_1_0_1)
{ after(grammarAccess.getTermAccess().getArgAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TerminalTerm__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalTerm__Group_0__0__Impl
	rule__TerminalTerm__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalTerm__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalTermAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getTerminalTermAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalTerm__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalTerm__Group_0__1__Impl
	rule__TerminalTerm__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalTerm__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalTermAccess().getTermParserRuleCall_0_1()); }
	ruleTerm
{ after(grammarAccess.getTerminalTermAccess().getTermParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalTerm__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalTerm__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalTerm__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalTermAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getTerminalTermAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Arithmetics__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arithmetics__Group__0__Impl
	rule__Arithmetics__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetics__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticsAccess().getHyphenMinusKeyword_0()); }

	'-' 

{ after(grammarAccess.getArithmeticsAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Arithmetics__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Arithmetics__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetics__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticsAccess().getTermAssignment_1()); }
(rule__Arithmetics__TermAssignment_1)
{ after(grammarAccess.getArithmeticsAccess().getTermAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Abstraction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abstraction__Group__0__Impl
	rule__Abstraction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstraction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractionAccess().getLambdaKeyword_0()); }

	'lambda' 

{ after(grammarAccess.getAbstractionAccess().getLambdaKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abstraction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abstraction__Group__1__Impl
	rule__Abstraction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstraction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractionAccess().getParamAssignment_1()); }
(rule__Abstraction__ParamAssignment_1)
{ after(grammarAccess.getAbstractionAccess().getParamAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abstraction__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abstraction__Group__2__Impl
	rule__Abstraction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstraction__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractionAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getAbstractionAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Abstraction__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Abstraction__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Abstraction__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractionAccess().getTermAssignment_3()); }
(rule__Abstraction__TermAssignment_3)
{ after(grammarAccess.getAbstractionAccess().getTermAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
(rule__Parameter__NameAssignment_0)
{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getGroup_1()); }
(rule__Parameter__Group_1__0)?
{ after(grammarAccess.getParameterAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_1__0__Impl
	rule__Parameter__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getColonKeyword_1_0()); }

	':' 

{ after(grammarAccess.getParameterAccess().getColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_1_1()); }
(rule__Parameter__TypeAssignment_1_1)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getTerminalTypeParserRuleCall_0()); }
	ruleTerminalType
{ after(grammarAccess.getTypeAccess().getTerminalTypeParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getGroup_1()); }
(rule__Type__Group_1__0)?
{ after(grammarAccess.getTypeAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__0__Impl
	rule__Type__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getArrowTypeLeftAction_1_0()); }
(

)
{ after(grammarAccess.getTypeAccess().getArrowTypeLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__1__Impl
	rule__Type__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }

	'->' 

{ after(grammarAccess.getTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getRightAssignment_1_2()); }
(rule__Type__RightAssignment_1_2)
{ after(grammarAccess.getTypeAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TerminalType__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalType__Group_0__0__Impl
	rule__TerminalType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalType__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalTypeAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getTerminalTypeAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalType__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalType__Group_0__1__Impl
	rule__TerminalType__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalType__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalTypeAccess().getTypeParserRuleCall_0_1()); }
	ruleType
{ after(grammarAccess.getTerminalTypeAccess().getTypeParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalType__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalType__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalType__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalTypeAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getTerminalTypeAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BasicType__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicType__Group_0__0__Impl
	rule__BasicType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTypeAccess().getIntTypeAction_0_0()); }
(

)
{ after(grammarAccess.getBasicTypeAccess().getIntTypeAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicType__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTypeAccess().getIntKeyword_0_1()); }

	'int' 

{ after(grammarAccess.getBasicTypeAccess().getIntKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicType__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicType__Group_1__0__Impl
	rule__BasicType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTypeAccess().getStringTypeAction_1_0()); }
(

)
{ after(grammarAccess.getBasicTypeAccess().getStringTypeAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicType__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicType__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicTypeAccess().getStringKeyword_1_1()); }

	'string' 

{ after(grammarAccess.getBasicTypeAccess().getStringKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Program__TermAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getTermTermParserRuleCall_0()); }
	ruleTerm{ after(grammarAccess.getProgramAccess().getTermTermParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__ArgAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getArgTerminalTermParserRuleCall_1_0_1_0()); }
	ruleTerminalTerm{ after(grammarAccess.getTermAccess().getArgTerminalTermParserRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringConstant__StringAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringConstantAccess().getStringSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringConstantAccess().getStringSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntConstant__IntAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntConstantAccess().getIntINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntConstantAccess().getIntINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Arithmetics__TermAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArithmeticsAccess().getTermTermParserRuleCall_1_0()); }
	ruleTerm{ after(grammarAccess.getArithmeticsAccess().getTermTermParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__RefAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getRefParameterCrossReference_0()); }
(
{ before(grammarAccess.getVariableAccess().getRefParameterIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getRefParameterIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVariableAccess().getRefParameterCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Abstraction__ParamAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractionAccess().getParamParameterParserRuleCall_1_0()); }
	ruleParameter{ after(grammarAccess.getAbstractionAccess().getParamParameterParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Abstraction__TermAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractionAccess().getTermTermParserRuleCall_3_0()); }
	ruleTerm{ after(grammarAccess.getAbstractionAccess().getTermTermParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_1_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getRightTypeParserRuleCall_1_2_0()); }
	ruleType{ after(grammarAccess.getTypeAccess().getRightTypeParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeVariable__TypevarNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeVariableAccess().getTypevarNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getTypeVariableAccess().getTypevarNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


