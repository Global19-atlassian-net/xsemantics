/*
* generated by Xtext
*/
package it.xsemantics.example.lambda.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import it.xsemantics.example.lambda.services.LambdaGrammarAccess;

public class LambdaParser extends AbstractContentAssistParser {
	
	@Inject
	private LambdaGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected it.xsemantics.example.lambda.ui.contentassist.antlr.internal.InternalLambdaParser createParser() {
		it.xsemantics.example.lambda.ui.contentassist.antlr.internal.InternalLambdaParser result = new it.xsemantics.example.lambda.ui.contentassist.antlr.internal.InternalLambdaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTerminalTermAccess().getAlternatives(), "rule__TerminalTerm__Alternatives");
					put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
					put(grammarAccess.getTerminalTypeAccess().getAlternatives(), "rule__TerminalType__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getAlternatives(), "rule__BasicType__Alternatives");
					put(grammarAccess.getTermAccess().getGroup(), "rule__Term__Group__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getTermAccess().getGroup_1_0(), "rule__Term__Group_1_0__0");
					put(grammarAccess.getTerminalTermAccess().getGroup_0(), "rule__TerminalTerm__Group_0__0");
					put(grammarAccess.getArithmeticsAccess().getGroup(), "rule__Arithmetics__Group__0");
					put(grammarAccess.getAbstractionAccess().getGroup(), "rule__Abstraction__Group__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_1(), "rule__Parameter__Group_1__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getTerminalTypeAccess().getGroup_0(), "rule__TerminalType__Group_0__0");
					put(grammarAccess.getBasicTypeAccess().getGroup_0(), "rule__BasicType__Group_0__0");
					put(grammarAccess.getBasicTypeAccess().getGroup_1(), "rule__BasicType__Group_1__0");
					put(grammarAccess.getProgramAccess().getTermAssignment(), "rule__Program__TermAssignment");
					put(grammarAccess.getTermAccess().getArgAssignment_1_0_1(), "rule__Term__ArgAssignment_1_0_1");
					put(grammarAccess.getStringConstantAccess().getStringAssignment(), "rule__StringConstant__StringAssignment");
					put(grammarAccess.getIntConstantAccess().getIntAssignment(), "rule__IntConstant__IntAssignment");
					put(grammarAccess.getArithmeticsAccess().getTermAssignment_1(), "rule__Arithmetics__TermAssignment_1");
					put(grammarAccess.getVariableAccess().getRefAssignment(), "rule__Variable__RefAssignment");
					put(grammarAccess.getAbstractionAccess().getParamAssignment_1(), "rule__Abstraction__ParamAssignment_1");
					put(grammarAccess.getAbstractionAccess().getTermAssignment_3(), "rule__Abstraction__TermAssignment_3");
					put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
					put(grammarAccess.getParameterAccess().getTypeAssignment_1_1(), "rule__Parameter__TypeAssignment_1_1");
					put(grammarAccess.getTypeAccess().getRightAssignment_1_2(), "rule__Type__RightAssignment_1_2");
					put(grammarAccess.getTypeVariableAccess().getTypevarNameAssignment(), "rule__TypeVariable__TypevarNameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			it.xsemantics.example.lambda.ui.contentassist.antlr.internal.InternalLambdaParser typedParser = (it.xsemantics.example.lambda.ui.contentassist.antlr.internal.InternalLambdaParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LambdaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LambdaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
