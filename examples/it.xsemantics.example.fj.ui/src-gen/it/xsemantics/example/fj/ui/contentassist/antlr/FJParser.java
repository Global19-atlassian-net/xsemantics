/*
* generated by Xtext
*/
package it.xsemantics.example.fj.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import it.xsemantics.example.fj.services.FJGrammarAccess;

public class FJParser extends AbstractContentAssistParser {
	
	@Inject
	private FJGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected it.xsemantics.example.fj.ui.contentassist.antlr.internal.InternalFJParser createParser() {
		it.xsemantics.example.fj.ui.contentassist.antlr.internal.InternalFJParser result = new it.xsemantics.example.fj.ui.contentassist.antlr.internal.InternalFJParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getBasicTypeAccess().getBasicAlternatives_0(), "rule__BasicType__BasicAlternatives_0");
					put(grammarAccess.getMemberAccess().getAlternatives(), "rule__Member__Alternatives");
					put(grammarAccess.getTypedElementAccess().getAlternatives(), "rule__TypedElement__Alternatives");
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getConstantAccess().getAlternatives(), "rule__Constant__Alternatives");
					put(grammarAccess.getBoolConstantAccess().getConstantAlternatives_0(), "rule__BoolConstant__ConstantAlternatives_0");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_2(), "rule__Class__Group_2__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_3(), "rule__Method__Group_3__0");
					put(grammarAccess.getMethodAccess().getGroup_3_1(), "rule__Method__Group_3_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getMethodBodyAccess().getGroup(), "rule__MethodBody__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0(), "rule__Expression__Group_1_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0_3(), "rule__Expression__Group_1_0_3__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0_3_1(), "rule__Expression__Group_1_0_3_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_0_3_1_1(), "rule__Expression__Group_1_0_3_1_1__0");
					put(grammarAccess.getNewAccess().getGroup(), "rule__New__Group__0");
					put(grammarAccess.getNewAccess().getGroup_3(), "rule__New__Group_3__0");
					put(grammarAccess.getNewAccess().getGroup_3_1(), "rule__New__Group_3_1__0");
					put(grammarAccess.getCastAccess().getGroup(), "rule__Cast__Group__0");
					put(grammarAccess.getParenAccess().getGroup(), "rule__Paren__Group__0");
					put(grammarAccess.getProgramAccess().getClassesAssignment_0(), "rule__Program__ClassesAssignment_0");
					put(grammarAccess.getProgramAccess().getMainAssignment_1(), "rule__Program__MainAssignment_1");
					put(grammarAccess.getBasicTypeAccess().getBasicAssignment(), "rule__BasicType__BasicAssignment");
					put(grammarAccess.getClassTypeAccess().getClassrefAssignment(), "rule__ClassType__ClassrefAssignment");
					put(grammarAccess.getClassAccess().getNameAssignment_1(), "rule__Class__NameAssignment_1");
					put(grammarAccess.getClassAccess().getSuperclassAssignment_2_1(), "rule__Class__SuperclassAssignment_2_1");
					put(grammarAccess.getClassAccess().getMembersAssignment_4(), "rule__Class__MembersAssignment_4");
					put(grammarAccess.getFieldAccess().getTypeAssignment_0(), "rule__Field__TypeAssignment_0");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getTypeAssignment_0(), "rule__Method__TypeAssignment_0");
					put(grammarAccess.getMethodAccess().getNameAssignment_1(), "rule__Method__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getParamsAssignment_3_0(), "rule__Method__ParamsAssignment_3_0");
					put(grammarAccess.getMethodAccess().getParamsAssignment_3_1_1(), "rule__Method__ParamsAssignment_3_1_1");
					put(grammarAccess.getMethodAccess().getBodyAssignment_6(), "rule__Method__BodyAssignment_6");
					put(grammarAccess.getParameterAccess().getTypeAssignment_0(), "rule__Parameter__TypeAssignment_0");
					put(grammarAccess.getParameterAccess().getNameAssignment_1(), "rule__Parameter__NameAssignment_1");
					put(grammarAccess.getMethodBodyAccess().getExpressionAssignment_1(), "rule__MethodBody__ExpressionAssignment_1");
					put(grammarAccess.getExpressionAccess().getMessageAssignment_1_0_2(), "rule__Expression__MessageAssignment_1_0_2");
					put(grammarAccess.getExpressionAccess().getArgsAssignment_1_0_3_1_0(), "rule__Expression__ArgsAssignment_1_0_3_1_0");
					put(grammarAccess.getExpressionAccess().getArgsAssignment_1_0_3_1_1_1(), "rule__Expression__ArgsAssignment_1_0_3_1_1_1");
					put(grammarAccess.getThisAccess().getVariableAssignment(), "rule__This__VariableAssignment");
					put(grammarAccess.getParamRefAccess().getParameterAssignment(), "rule__ParamRef__ParameterAssignment");
					put(grammarAccess.getNewAccess().getTypeAssignment_1(), "rule__New__TypeAssignment_1");
					put(grammarAccess.getNewAccess().getArgsAssignment_3_0(), "rule__New__ArgsAssignment_3_0");
					put(grammarAccess.getNewAccess().getArgsAssignment_3_1_1(), "rule__New__ArgsAssignment_3_1_1");
					put(grammarAccess.getCastAccess().getTypeAssignment_1(), "rule__Cast__TypeAssignment_1");
					put(grammarAccess.getCastAccess().getExpressionAssignment_3(), "rule__Cast__ExpressionAssignment_3");
					put(grammarAccess.getStringConstantAccess().getConstantAssignment(), "rule__StringConstant__ConstantAssignment");
					put(grammarAccess.getIntConstantAccess().getConstantAssignment(), "rule__IntConstant__ConstantAssignment");
					put(grammarAccess.getBoolConstantAccess().getConstantAssignment(), "rule__BoolConstant__ConstantAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			it.xsemantics.example.fj.ui.contentassist.antlr.internal.InternalFJParser typedParser = (it.xsemantics.example.fj.ui.contentassist.antlr.internal.InternalFJParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FJGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FJGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
