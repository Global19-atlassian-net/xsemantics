/*
* generated by Xtext
*/
grammar InternalLambda;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package it.xsemantics.example.lambda.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package it.xsemantics.example.lambda.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import it.xsemantics.example.lambda.services.LambdaGrammarAccess;

}

@parser::members {

 	private LambdaGrammarAccess grammarAccess;
 	
    public InternalLambdaParser(TokenStream input, LambdaGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected LambdaGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getTermTermParserRuleCall_0()); 
	    }
		lv_term_0_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_0_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermAccess().getTerminalTermParserRuleCall_0()); 
    }
    this_TerminalTerm_0=ruleTerminalTerm
    { 
        $current = $this_TerminalTerm_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
ruleTerminalTerm
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTermAccess().getApplicationFunAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getArgTerminalTermParserRuleCall_1_0_1_0()); 
	    }
		lv_arg_2_0=ruleTerminalTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_2_0, 
        		"TerminalTerm");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleTerminalTerm
entryRuleTerminalTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalTermRule()); }
	 iv_ruleTerminalTerm=ruleTerminalTerm 
	 { $current=$iv_ruleTerminalTerm.current; } 
	 EOF 
;

// Rule TerminalTerm
ruleTerminalTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTerminalTermAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getTerminalTermAccess().getTermParserRuleCall_0_1()); 
    }
    this_Term_1=ruleTerm
    { 
        $current = $this_Term_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerminalTermAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTerminalTermAccess().getConstantParserRuleCall_1()); 
    }
    this_Constant_3=ruleConstant
    { 
        $current = $this_Constant_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalTermAccess().getArithmeticsParserRuleCall_2()); 
    }
    this_Arithmetics_4=ruleArithmetics
    { 
        $current = $this_Arithmetics_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalTermAccess().getVariableParserRuleCall_3()); 
    }
    this_Variable_5=ruleVariable
    { 
        $current = $this_Variable_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalTermAccess().getAbstractionParserRuleCall_4()); 
    }
    this_Abstraction_6=ruleAbstraction
    { 
        $current = $this_Abstraction_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getStringConstantParserRuleCall_0()); 
    }
    this_StringConstant_0=ruleStringConstant
    { 
        $current = $this_StringConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConstantAccess().getIntConstantParserRuleCall_1()); 
    }
    this_IntConstant_1=ruleIntConstant
    { 
        $current = $this_IntConstant_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringConstant
entryRuleStringConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringConstantRule()); }
	 iv_ruleStringConstant=ruleStringConstant 
	 { $current=$iv_ruleStringConstant.current; } 
	 EOF 
;

// Rule StringConstant
ruleStringConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_string_0_0=RULE_STRING
		{
			newLeafNode(lv_string_0_0, grammarAccess.getStringConstantAccess().getStringSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"string",
        		lv_string_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntConstant
entryRuleIntConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntConstantRule()); }
	 iv_ruleIntConstant=ruleIntConstant 
	 { $current=$iv_ruleIntConstant.current; } 
	 EOF 
;

// Rule IntConstant
ruleIntConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_int_0_0=RULE_INT
		{
			newLeafNode(lv_int_0_0, grammarAccess.getIntConstantAccess().getIntINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"int",
        		lv_int_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleArithmetics
entryRuleArithmetics returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArithmeticsRule()); }
	 iv_ruleArithmetics=ruleArithmetics 
	 { $current=$iv_ruleArithmetics.current; } 
	 EOF 
;

// Rule Arithmetics
ruleArithmetics returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArithmeticsAccess().getHyphenMinusKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArithmeticsAccess().getTermTermParserRuleCall_1_0()); 
	    }
		lv_term_1_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArithmeticsRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_1_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getRefParameterCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleAbstraction
entryRuleAbstraction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractionRule()); }
	 iv_ruleAbstraction=ruleAbstraction 
	 { $current=$iv_ruleAbstraction.current; } 
	 EOF 
;

// Rule Abstraction
ruleAbstraction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='lambda' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAbstractionAccess().getLambdaKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractionAccess().getParamParameterParserRuleCall_1_0()); 
	    }
		lv_param_1_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractionRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_1_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbstractionAccess().getFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbstractionAccess().getTermTermParserRuleCall_3_0()); 
	    }
		lv_term_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbstractionRule());
	        }
       		set(
       			$current, 
       			"term",
        		lv_term_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getColonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getTerminalTypeParserRuleCall_0()); 
    }
    this_TerminalType_0=ruleTerminalType
    { 
        $current = $this_TerminalType_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTypeAccess().getArrowTypeLeftAction_1_0(),
            $current);
    }
)	otherlv_2='->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getHyphenMinusGreaterThanSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getRightTypeParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTerminalType
entryRuleTerminalType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalTypeRule()); }
	 iv_ruleTerminalType=ruleTerminalType 
	 { $current=$iv_ruleTerminalType.current; } 
	 EOF 
;

// Rule TerminalType
ruleTerminalType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTerminalTypeAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getTerminalTypeAccess().getTypeParserRuleCall_0_1()); 
    }
    this_Type_1=ruleType
    { 
        $current = $this_Type_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTerminalTypeAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTerminalTypeAccess().getBasicTypeParserRuleCall_1()); 
    }
    this_BasicType_3=ruleBasicType
    { 
        $current = $this_BasicType_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTerminalTypeAccess().getTypeVariableParserRuleCall_2()); 
    }
    this_TypeVariable_4=ruleTypeVariable
    { 
        $current = $this_TypeVariable_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicType
entryRuleBasicType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicTypeRule()); }
	 iv_ruleBasicType=ruleBasicType 
	 { $current=$iv_ruleBasicType.current; } 
	 EOF 
;

// Rule BasicType
ruleBasicType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBasicTypeAccess().getIntTypeAction_0_0(),
            $current);
    }
)	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBasicTypeAccess().getIntKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBasicTypeAccess().getStringTypeAction_1_0(),
            $current);
    }
)	otherlv_3='string' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBasicTypeAccess().getStringKeyword_1_1());
    }
))
;





// Entry rule entryRuleTypeVariable
entryRuleTypeVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeVariableRule()); }
	 iv_ruleTypeVariable=ruleTypeVariable 
	 { $current=$iv_ruleTypeVariable.current; } 
	 EOF 
;

// Rule TypeVariable
ruleTypeVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_typevarName_0_0=RULE_ID
		{
			newLeafNode(lv_typevarName_0_0, grammarAccess.getTypeVariableAccess().getTypevarNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"typevarName",
        		lv_typevarName_0_0, 
        		"ID");
	    }

)
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


