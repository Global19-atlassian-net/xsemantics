/*
* generated by Xtext
*/

package it.xsemantics.example.lambda.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LambdaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Assignment cTermAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_0 = (RuleCall)cTermAssignment.eContents().get(0);
		
		//Program:
		//	term=Term;
		public ParserRule getRule() { return rule; }

		//term=Term
		public Assignment getTermAssignment() { return cTermAssignment; }

		//Term
		public RuleCall getTermTermParserRuleCall_0() { return cTermTermParserRuleCall_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cApplicationFunAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cArgAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cArgTerminalTermParserRuleCall_1_0_1_0 = (RuleCall)cArgAssignment_1_0_1.eContents().get(0);
		
		//// left associative
		//Term:
		//	TerminalTerm => ({Application.fun=current} arg=TerminalTerm)*;
		public ParserRule getRule() { return rule; }

		//TerminalTerm => ({Application.fun=current} arg=TerminalTerm)*
		public Group getGroup() { return cGroup; }

		//TerminalTerm
		public RuleCall getTerminalTermParserRuleCall_0() { return cTerminalTermParserRuleCall_0; }

		//=> ({Application.fun=current} arg=TerminalTerm)*
		public Group getGroup_1() { return cGroup_1; }

		//{Application.fun=current} arg=TerminalTerm
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Application.fun=current}
		public Action getApplicationFunAction_1_0_0() { return cApplicationFunAction_1_0_0; }

		//arg=TerminalTerm
		public Assignment getArgAssignment_1_0_1() { return cArgAssignment_1_0_1; }

		//TerminalTerm
		public RuleCall getArgTerminalTermParserRuleCall_1_0_1_0() { return cArgTerminalTermParserRuleCall_1_0_1_0; }
	}

	public class TerminalTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalTerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTermParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArithmeticsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAbstractionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TerminalTerm returns Term:
		//	"(" Term ")" | Constant | Arithmetics | Variable | Abstraction;
		public ParserRule getRule() { return rule; }

		//"(" Term ")" | Constant | Arithmetics | Variable | Abstraction
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Term ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Term
		public RuleCall getTermParserRuleCall_0_1() { return cTermParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Constant
		public RuleCall getConstantParserRuleCall_1() { return cConstantParserRuleCall_1; }

		//Arithmetics
		public RuleCall getArithmeticsParserRuleCall_2() { return cArithmeticsParserRuleCall_2; }

		//Variable
		public RuleCall getVariableParserRuleCall_3() { return cVariableParserRuleCall_3; }

		//Abstraction
		public RuleCall getAbstractionParserRuleCall_4() { return cAbstractionParserRuleCall_4; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntConstantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Constant:
		//	StringConstant | IntConstant;
		public ParserRule getRule() { return rule; }

		//StringConstant | IntConstant
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringConstant
		public RuleCall getStringConstantParserRuleCall_0() { return cStringConstantParserRuleCall_0; }

		//IntConstant
		public RuleCall getIntConstantParserRuleCall_1() { return cIntConstantParserRuleCall_1; }
	}

	public class StringConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringConstant");
		private final Assignment cStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_0 = (RuleCall)cStringAssignment.eContents().get(0);
		
		//StringConstant:
		//	string=STRING;
		public ParserRule getRule() { return rule; }

		//string=STRING
		public Assignment getStringAssignment() { return cStringAssignment; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0() { return cStringSTRINGTerminalRuleCall_0; }
	}

	public class IntConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntConstant");
		private final Assignment cIntAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntINTTerminalRuleCall_0 = (RuleCall)cIntAssignment.eContents().get(0);
		
		//IntConstant:
		//	int=INT;
		public ParserRule getRule() { return rule; }

		//int=INT
		public Assignment getIntAssignment() { return cIntAssignment; }

		//INT
		public RuleCall getIntINTTerminalRuleCall_0() { return cIntINTTerminalRuleCall_0; }
	}

	public class ArithmeticsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arithmetics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTermAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermTermParserRuleCall_1_0 = (RuleCall)cTermAssignment_1.eContents().get(0);
		
		//Arithmetics:
		//	"-" term=Term;
		public ParserRule getRule() { return rule; }

		//"-" term=Term
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//term=Term
		public Assignment getTermAssignment_1() { return cTermAssignment_1; }

		//Term
		public RuleCall getTermTermParserRuleCall_1_0() { return cTermTermParserRuleCall_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefParameterCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefParameterIDTerminalRuleCall_0_1 = (RuleCall)cRefParameterCrossReference_0.eContents().get(1);
		
		//Variable:
		//	ref=[Parameter];
		public ParserRule getRule() { return rule; }

		//ref=[Parameter]
		public Assignment getRefAssignment() { return cRefAssignment; }

		//[Parameter]
		public CrossReference getRefParameterCrossReference_0() { return cRefParameterCrossReference_0; }

		//ID
		public RuleCall getRefParameterIDTerminalRuleCall_0_1() { return cRefParameterIDTerminalRuleCall_0_1; }
	}

	public class AbstractionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Abstraction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLambdaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamParameterParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTermAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTermTermParserRuleCall_3_0 = (RuleCall)cTermAssignment_3.eContents().get(0);
		
		//Abstraction:
		//	"lambda" param=Parameter "." term=Term;
		public ParserRule getRule() { return rule; }

		//"lambda" param=Parameter "." term=Term
		public Group getGroup() { return cGroup; }

		//"lambda"
		public Keyword getLambdaKeyword_0() { return cLambdaKeyword_0; }

		//param=Parameter
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }

		//Parameter
		public RuleCall getParamParameterParserRuleCall_1_0() { return cParamParameterParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//term=Term
		public Assignment getTermAssignment_3() { return cTermAssignment_3; }

		//Term
		public RuleCall getTermTermParserRuleCall_3_0() { return cTermTermParserRuleCall_3_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//Parameter:
		//	name=ID (":" type=Type)?;
		public ParserRule getRule() { return rule; }

		//name=ID (":" type=Type)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//(":" type=Type)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArrowTypeLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTypeParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// right associative
		//Type:
		//	TerminalType ({ArrowType.left=current} "->" right=Type)?;
		public ParserRule getRule() { return rule; }

		//TerminalType ({ArrowType.left=current} "->" right=Type)?
		public Group getGroup() { return cGroup; }

		//TerminalType
		public RuleCall getTerminalTypeParserRuleCall_0() { return cTerminalTypeParserRuleCall_0; }

		//({ArrowType.left=current} "->" right=Type)?
		public Group getGroup_1() { return cGroup_1; }

		//{ArrowType.left=current}
		public Action getArrowTypeLeftAction_1_0() { return cArrowTypeLeftAction_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }

		//right=Type
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Type
		public RuleCall getRightTypeParserRuleCall_1_2_0() { return cRightTypeParserRuleCall_1_2_0; }
	}

	public class TerminalTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cBasicTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTypeVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TerminalType returns Type:
		//	"(" Type ")" | BasicType | TypeVariable;
		public ParserRule getRule() { return rule; }

		//"(" Type ")" | BasicType | TypeVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Type ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Type
		public RuleCall getTypeParserRuleCall_0_1() { return cTypeParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//BasicType
		public RuleCall getBasicTypeParserRuleCall_1() { return cBasicTypeParserRuleCall_1; }

		//TypeVariable
		public RuleCall getTypeVariableParserRuleCall_2() { return cTypeVariableParserRuleCall_2; }
	}

	public class BasicTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cStringKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//BasicType:
		//	{IntType} "int" | {StringType} "string";
		public ParserRule getRule() { return rule; }

		//{IntType} "int" | {StringType} "string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} "int"
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//"int"
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//{StringType} "string"
		public Group getGroup_1() { return cGroup_1; }

		//{StringType}
		public Action getStringTypeAction_1_0() { return cStringTypeAction_1_0; }

		//"string"
		public Keyword getStringKeyword_1_1() { return cStringKeyword_1_1; }
	}

	public class TypeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeVariable");
		private final Assignment cTypevarNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypevarNameIDTerminalRuleCall_0 = (RuleCall)cTypevarNameAssignment.eContents().get(0);
		
		//TypeVariable:
		//	typevarName=ID;
		public ParserRule getRule() { return rule; }

		//typevarName=ID
		public Assignment getTypevarNameAssignment() { return cTypevarNameAssignment; }

		//ID
		public RuleCall getTypevarNameIDTerminalRuleCall_0() { return cTypevarNameIDTerminalRuleCall_0; }
	}
	
	
	private ProgramElements pProgram;
	private TermElements pTerm;
	private TerminalTermElements pTerminalTerm;
	private ConstantElements pConstant;
	private StringConstantElements pStringConstant;
	private IntConstantElements pIntConstant;
	private ArithmeticsElements pArithmetics;
	private VariableElements pVariable;
	private AbstractionElements pAbstraction;
	private ParameterElements pParameter;
	private TypeElements pType;
	private TerminalTypeElements pTerminalType;
	private BasicTypeElements pBasicType;
	private TypeVariableElements pTypeVariable;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LambdaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.xsemantics.example.lambda.Lambda".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	term=Term;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//// left associative
	//Term:
	//	TerminalTerm => ({Application.fun=current} arg=TerminalTerm)*;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//TerminalTerm returns Term:
	//	"(" Term ")" | Constant | Arithmetics | Variable | Abstraction;
	public TerminalTermElements getTerminalTermAccess() {
		return (pTerminalTerm != null) ? pTerminalTerm : (pTerminalTerm = new TerminalTermElements());
	}
	
	public ParserRule getTerminalTermRule() {
		return getTerminalTermAccess().getRule();
	}

	//Constant:
	//	StringConstant | IntConstant;
	public ConstantElements getConstantAccess() {
		return (pConstant != null) ? pConstant : (pConstant = new ConstantElements());
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//StringConstant:
	//	string=STRING;
	public StringConstantElements getStringConstantAccess() {
		return (pStringConstant != null) ? pStringConstant : (pStringConstant = new StringConstantElements());
	}
	
	public ParserRule getStringConstantRule() {
		return getStringConstantAccess().getRule();
	}

	//IntConstant:
	//	int=INT;
	public IntConstantElements getIntConstantAccess() {
		return (pIntConstant != null) ? pIntConstant : (pIntConstant = new IntConstantElements());
	}
	
	public ParserRule getIntConstantRule() {
		return getIntConstantAccess().getRule();
	}

	//Arithmetics:
	//	"-" term=Term;
	public ArithmeticsElements getArithmeticsAccess() {
		return (pArithmetics != null) ? pArithmetics : (pArithmetics = new ArithmeticsElements());
	}
	
	public ParserRule getArithmeticsRule() {
		return getArithmeticsAccess().getRule();
	}

	//Variable:
	//	ref=[Parameter];
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Abstraction:
	//	"lambda" param=Parameter "." term=Term;
	public AbstractionElements getAbstractionAccess() {
		return (pAbstraction != null) ? pAbstraction : (pAbstraction = new AbstractionElements());
	}
	
	public ParserRule getAbstractionRule() {
		return getAbstractionAccess().getRule();
	}

	//Parameter:
	//	name=ID (":" type=Type)?;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//// right associative
	//Type:
	//	TerminalType ({ArrowType.left=current} "->" right=Type)?;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//TerminalType returns Type:
	//	"(" Type ")" | BasicType | TypeVariable;
	public TerminalTypeElements getTerminalTypeAccess() {
		return (pTerminalType != null) ? pTerminalType : (pTerminalType = new TerminalTypeElements());
	}
	
	public ParserRule getTerminalTypeRule() {
		return getTerminalTypeAccess().getRule();
	}

	//BasicType:
	//	{IntType} "int" | {StringType} "string";
	public BasicTypeElements getBasicTypeAccess() {
		return (pBasicType != null) ? pBasicType : (pBasicType = new BasicTypeElements());
	}
	
	public ParserRule getBasicTypeRule() {
		return getBasicTypeAccess().getRule();
	}

	//TypeVariable:
	//	typevarName=ID;
	public TypeVariableElements getTypeVariableAccess() {
		return (pTypeVariable != null) ? pTypeVariable : (pTypeVariable = new TypeVariableElements());
	}
	
	public ParserRule getTypeVariableRule() {
		return getTypeVariableAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
