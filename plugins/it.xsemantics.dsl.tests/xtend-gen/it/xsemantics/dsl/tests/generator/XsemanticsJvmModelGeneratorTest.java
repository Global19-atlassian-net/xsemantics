package it.xsemantics.dsl.tests.generator;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import it.xsemantics.dsl.tests.XsemanticsBaseTest;
import it.xsemantics.dsl.tests.XsemanticsCompilationTestHelper;
import it.xsemantics.dsl.tests.XsemanticsCompilationTestHelper.Result;
import it.xsemantics.dsl.tests.XsemanticsInjectorProviderCustom;
import it.xsemantics.dsl.xsemantics.XsemanticsSystem;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import junit.framework.Assert;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.util.IAcceptor;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Test;
import org.junit.runner.RunWith;

@InjectWith(value = XsemanticsInjectorProviderCustom.class)
@RunWith(value = XtextRunner.class)
@SuppressWarnings("all")
public class XsemanticsJvmModelGeneratorTest extends XsemanticsBaseTest {
  @Inject
  private XsemanticsCompilationTestHelper _xsemanticsCompilationTestHelper;
  
  @Test
  public void testJudgmentDescriptions() {
    CharSequence _testJudgmentDescriptions = this.testFiles.testJudgmentDescriptions();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.XsemanticsRuntimeSystem;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Set;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystem extends XsemanticsRuntimeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<Boolean>> typeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public TypeSystem() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typeDispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"typeImpl\", 4, \"|-\", \":\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> type(final List<String> list, final Set<Integer> set) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(new RuleEnvironment(), null, list, set);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> type(final RuleEnvironment _environment_, final List<String> list, final Set<Integer> set) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(_environment_, null, list, set);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> type(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final List<String> list, final Set<Integer> set) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeInternal(_environment_, _trace_, list, set);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> typeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final List<String> list, final Set<Integer> set) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(list, set);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeDispatcher.invoke(_environment_, _trace_, list, set);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testJudgmentDescriptions, _builder);
  }
  
  @Test
  public void testSimpleRule() {
    CharSequence _testSimpleRule = this.testFiles.testSimpleRule();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.common.base.Objects;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.ErrorInformation;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleFailedException;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.XsemanticsRuntimeSystem;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EcoreFactory;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.StringExtensions;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystem extends XsemanticsRuntimeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String ECLASSEOBJECT = \"it.xsemantics.test.rules.EClassEObject\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<Boolean>> typeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public TypeSystem() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typeDispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"typeImpl\", 4, \"|-\", \":\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> type(final EClass c, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(new RuleEnvironment(), null, c, o);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> type(final RuleEnvironment _environment_, final EClass c, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(_environment_, null, c, o);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> type(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeInternal(_environment_, _trace_, c, o);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> typeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(c, o);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeDispatcher.invoke(_environment_, _trace_, c, o);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> typeImpl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass eClass, final EObject object) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<Boolean> _result_ = applyRuleEClassEObject(G, _subtrace_, eClass, object);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"EClassEObject\") + stringRepForEnv(G) + \" |- \" + stringRep(eClass) + \" : \" + stringRep(object));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleEClassEObject) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throwRuleFailedException(ruleName(\"EClassEObject\") + stringRepForEnv(G) + \" |- \" + stringRep(eClass) + \" : \" + stringRep(object),");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("ECLASSEOBJECT,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleEClassEObject, new ErrorInformation(eClass), new ErrorInformation(object));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> applyRuleEClassEObject(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass eClass, final EObject object) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("String _string = new String();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("String _firstUpper = StringExtensions.toFirstUpper(\"bar\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("String _plus = (_string + _firstUpper);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("boolean _equals = Objects.equal(\"foo\", _plus);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/* \'foo\' == new String() + \"bar\".toFirstUpper */");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (!_equals) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sneakyThrowRuleFailedException(\"\\\'foo\\\' == new String() + \\\"bar\\\".toFirstUpper\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("final EClass eC = EcoreFactory.eINSTANCE.createEClass();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("eC.setName(\"MyEClass\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("boolean _equals_1 = Objects.equal(eClass, eC);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/* eClass == eC */");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (!Boolean.valueOf(_equals_1)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sneakyThrowRuleFailedException(\"eClass == eC\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<Boolean>(true);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testSimpleRule, _builder);
  }
  
  @Test
  public void testRuleWithTwoOutputParams() {
    CharSequence _testRuleWithTwoOutputParams = this.testFiles.testRuleWithTwoOutputParams();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.ErrorInformation;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result2;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleFailedException;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.XsemanticsRuntimeSystem;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystem extends XsemanticsRuntimeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String ECLASSEOBJECTESTRUCTURALFEATURE = \"it.xsemantics.test.rules.EClassEObjectEStructuralFeature\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<EObject>> typeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result2<EObject,EStructuralFeature>> type2Dispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<EObject>> subtypeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public TypeSystem() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typeDispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"typeImpl\", 4, \"|-\", \":\", \":\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type2Dispatcher = buildPolymorphicDispatcher2(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"type2Impl\", 3, \"||-\", \":\", \":\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("subtypeDispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"subtypeImpl\", 4, \"||-\", \"<:\", \":>\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EObject> type(final EClass c, final EStructuralFeature f) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(new RuleEnvironment(), null, c, f);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EObject> type(final RuleEnvironment _environment_, final EClass c, final EStructuralFeature f) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(_environment_, null, c, f);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EObject> type(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c, final EStructuralFeature f) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeInternal(_environment_, _trace_, c, f);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result2<EObject,EStructuralFeature> type2(final EClass c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type2(new RuleEnvironment(), null, c);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result2<EObject,EStructuralFeature> type2(final RuleEnvironment _environment_, final EClass c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type2(_environment_, null, c);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result2<EObject,EStructuralFeature> type2(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return type2Internal(_environment_, _trace_, c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type2) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure2(_e_type2);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EObject> subtype(final EClass c, final EStructuralFeature f) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return subtype(new RuleEnvironment(), null, c, f);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EObject> subtype(final RuleEnvironment _environment_, final EClass c, final EStructuralFeature f) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return subtype(_environment_, null, c, f);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EObject> subtype(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c, final EStructuralFeature f) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return subtypeInternal(_environment_, _trace_, c, f);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_subtype) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_subtype);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EObject> typeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c, final EStructuralFeature f) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(c, f);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeDispatcher.invoke(_environment_, _trace_, c, f);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result2<EObject,EStructuralFeature> type2Internal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(c);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return type2Dispatcher.invoke(_environment_, _trace_, c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type2) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type2);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EObject> subtypeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c, final EStructuralFeature f) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(c, f);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return subtypeDispatcher.invoke(_environment_, _trace_, c, f);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_subtype) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_subtype);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result2<EObject,EStructuralFeature> type2Impl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass eClass) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result2<EObject,EStructuralFeature> _result_ = applyRuleEClassEObjectEStructuralFeature(G, _subtrace_, eClass);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"EClassEObjectEStructuralFeature\") + stringRepForEnv(G) + \" ||- \" + stringRep(eClass) + \" : \" + stringRep(_result_.getFirst()) + \" : \" + stringRep(_result_.getSecond()));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleEClassEObjectEStructuralFeature) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throwRuleFailedException(ruleName(\"EClassEObjectEStructuralFeature\") + stringRepForEnv(G) + \" ||- \" + stringRep(eClass) + \" : \" + \"EObject\" + \" : \" + \"EStructuralFeature\",");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("ECLASSEOBJECTESTRUCTURALFEATURE,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleEClassEObjectEStructuralFeature, new ErrorInformation(eClass));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result2<EObject,EStructuralFeature> applyRuleEClassEObjectEStructuralFeature(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass eClass) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EObject object = null; // output parameter");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EStructuralFeature feat = null; // output parameter");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/* G ||- eClass : object : feat */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Result2<EObject,EStructuralFeature> result = type2Internal(G, _trace_, eClass);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("checkAssignableTo(result.getFirst(), EObject.class);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("object = (EObject) result.getFirst();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("checkAssignableTo(result.getSecond(), EStructuralFeature.class);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("feat = (EStructuralFeature) result.getSecond();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result2<EObject,EStructuralFeature>(object, feat);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testRuleWithTwoOutputParams, _builder);
  }
  
  @Test
  public void testJudgmentDescriptionsWithErrorSpecification() {
    CharSequence _testJudgmentDescriptionsWithErrorSpecification = this.testFiles.testJudgmentDescriptionsWithErrorSpecification();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.ErrorInformation;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleFailedException;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.XsemanticsRuntimeSystem;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystem extends XsemanticsRuntimeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<EClass>> typeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public TypeSystem() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typeDispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"typeImpl\", 3, \"|-\", \":\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final EObject c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(new RuleEnvironment(), null, c);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final EObject c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(_environment_, null, c);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeInternal(_environment_, _trace_, c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(c);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeDispatcher.invoke(_environment_, _trace_, c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected void typeThrowException(final String _issue, final Exception _ex, final EObject c) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String _plus = (\"this \" + c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String _plus_1 = (_plus + \" made an error!\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("String error = _plus_1;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EObject source = c;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EClass _eClass = c.eClass();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EStructuralFeature _eContainingFeature = _eClass.eContainingFeature();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EStructuralFeature feature = _eContainingFeature;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("throwRuleFailedException(error,");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("_issue, _ex, new ErrorInformation(source, feature));");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testJudgmentDescriptionsWithErrorSpecification, _builder);
  }
  
  @Test
  public void testCheckRule() {
    CharSequence _testCheckRule = this.testFiles.testCheckRule();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.ErrorInformation;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleFailedException;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.XsemanticsRuntimeSystem;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystem extends XsemanticsRuntimeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String EOBJECTECLASS = \"it.xsemantics.test.rules.EObjectEClass\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<EClass>> typeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public TypeSystem() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typeDispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"typeImpl\", 3, \"|-\", \":\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final EObject c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(new RuleEnvironment(), null, c);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final EObject c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(_environment_, null, c);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeInternal(_environment_, _trace_, c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> checkEObject(final EObject obj) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return checkEObjectInternal(null, obj);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(e);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> checkEObjectInternal(final RuleApplicationTrace _trace_, final EObject obj) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EClass result = null;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/* empty |- obj : result */");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<EClass> result_1 = typeInternal(emptyEnvironment(), _trace_, obj);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("checkAssignableTo(result_1.getFirst(), EClass.class);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("result = (EClass) result_1.getFirst();");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<Boolean>(true);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(c);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeDispatcher.invoke(_environment_, _trace_, c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeImpl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject object) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<EClass> _result_ = applyRuleEObjectEClass(G, _subtrace_, object);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"EObjectEClass\") + stringRepForEnv(G) + \" |- \" + stringRep(object) + \" : \" + stringRep(_result_.getFirst()));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleEObjectEClass) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throwRuleFailedException(ruleName(\"EObjectEClass\") + stringRepForEnv(G) + \" |- \" + stringRep(object) + \" : \" + \"EClass\",");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("EOBJECTECLASS,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleEObjectEClass, new ErrorInformation(object));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> applyRuleEObjectEClass(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject object) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EClass _eClass = object.eClass();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<EClass>(_eClass);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testCheckRule, _builder);
  }
  
  @Test
  public void testValidator() {
    CharSequence _testCheckRule = this.testFiles.testCheckRule();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test.validation;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.validation.XsemanticsBasedDeclarativeValidator;");
    _builder.newLine();
    _builder.append("import it.xsemantics.test.TypeSystem;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.validation.Check;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystemValidator extends XsemanticsBasedDeclarativeValidator {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected TypeSystem xsemanticsSystem;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Check");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void checkEObject(final EObject obj) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("generateErrors(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("xsemanticsSystem.checkEObject(obj),");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("obj);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testCheckRule, 
      null, _builder);
  }
  
  @Test
  public void testAccessToInjectedFields() {
    CharSequence _testAccessToInjectedFields = this.testFiles.testAccessToInjectedFields();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.ErrorInformation;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleFailedException;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.XsemanticsRuntimeSystem;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystem extends XsemanticsRuntimeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String EOBJECTECLASS = \"it.xsemantics.test.rules.EObjectEClass\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* a utility field");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private List<String> strings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private String myString;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* another utility field");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private List<EClass> eClasses;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private List<EClass> classes;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<EClass>> typeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public TypeSystem() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typeDispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"typeImpl\", 3, \"|-\", \":\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public List<String> getStrings() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.strings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setStrings(final List<String> strings) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.strings = strings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String getMyString() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.myString;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setMyString(final String myString) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.myString = myString;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public List<EClass> getEClasses() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.eClasses;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setEClasses(final List<EClass> eClasses) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.eClasses = eClasses;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public List<EClass> getClasses() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.classes;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setClasses(final List<EClass> classes) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.classes = classes;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(new RuleEnvironment(), null, o);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(_environment_, null, o);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeInternal(_environment_, _trace_, o);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(o);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeDispatcher.invoke(_environment_, _trace_, o);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeImpl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject o) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<EClass> _result_ = applyRuleEObjectEClass(G, _subtrace_, o);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"EObjectEClass\") + stringRepForEnv(G) + \" |- \" + stringRep(o) + \" : \" + stringRep(_result_.getFirst()));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleEObjectEClass) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throwRuleFailedException(ruleName(\"EObjectEClass\") + stringRepForEnv(G) + \" |- \" + stringRep(o) + \" : \" + \"EClass\",");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("EOBJECTECLASS,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleEObjectEClass, new ErrorInformation(o));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> applyRuleEObjectEClass(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject o) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EClass c = null; // output parameter");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("InputOutput.<EObject>println(o);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("InputOutput.<String>println(this.myString);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("boolean _add = this.strings.add(this.myString);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/* strings.add(myString) */");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (!_add) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sneakyThrowRuleFailedException(\"strings.add(myString)\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EClass _eClass = o.eClass();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("boolean _add_1 = this.eClasses.add(_eClass);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/* eClasses.add(o.eClass) */");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if (!Boolean.valueOf(_add_1)) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sneakyThrowRuleFailedException(\"eClasses.add(o.eClass)\");");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<EClass>(c);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testAccessToInjectedFields, _builder);
  }
  
  @Test
  public void testExpressionsInConclusion() {
    CharSequence _testTwoExpressionsInConclusion = this.testFiles.testTwoExpressionsInConclusion();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.ErrorInformation;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result2;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleFailedException;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.XsemanticsRuntimeSystem;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.common.util.EList;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EStructuralFeature;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.IterableExtensions;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystem extends XsemanticsRuntimeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String TWOEXPRESSIONSINCONCLUSION = \"it.xsemantics.test.rules.TwoExpressionsInConclusion\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result2<EObject,EStructuralFeature>> typeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public TypeSystem() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typeDispatcher = buildPolymorphicDispatcher2(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"typeImpl\", 3, \"|-\", \":\", \":\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result2<EObject,EStructuralFeature> type(final EClass c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(new RuleEnvironment(), null, c);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result2<EObject,EStructuralFeature> type(final RuleEnvironment _environment_, final EClass c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(_environment_, null, c);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result2<EObject,EStructuralFeature> type(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeInternal(_environment_, _trace_, c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure2(_e_type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result2<EObject,EStructuralFeature> typeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(c);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeDispatcher.invoke(_environment_, _trace_, c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result2<EObject,EStructuralFeature> typeImpl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass cl) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result2<EObject,EStructuralFeature> _result_ = applyRuleTwoExpressionsInConclusion(G, _subtrace_, cl);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"TwoExpressionsInConclusion\") + stringRepForEnv(G) + \" |- \" + stringRep(cl) + \" : \" + stringRep(_result_.getFirst()) + \" : \" + stringRep(_result_.getSecond()));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleTwoExpressionsInConclusion) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throwRuleFailedException(ruleName(\"TwoExpressionsInConclusion\") + stringRepForEnv(G) + \" |- \" + stringRep(cl) + \" : \" + \"EClass\" + \" : \" + \"EStructuralFeature\",");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("TWOEXPRESSIONSINCONCLUSION,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleTwoExpressionsInConclusion, new ErrorInformation(cl));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result2<EObject,EStructuralFeature> applyRuleTwoExpressionsInConclusion(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass cl) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EList<EStructuralFeature> _eAllStructuralFeatures = cl.getEAllStructuralFeatures();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EStructuralFeature _head = IterableExtensions.<EStructuralFeature>head(_eAllStructuralFeatures);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result2<EObject,EStructuralFeature>(cl, _head);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testTwoExpressionsInConclusion, _builder);
  }
  
  @Test
  public void testAccessToThisInExpressionsInConclusion() {
    CharSequence _testAccessToThisInExpressionInConclusion = this.testFiles.testAccessToThisInExpressionInConclusion();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.ErrorInformation;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleFailedException;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.XsemanticsRuntimeSystem;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.xbase.lib.InputOutput;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystem extends XsemanticsRuntimeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String EOBJECTECLASS = \"it.xsemantics.test.rules.EObjectEClass\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* a utility field");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private List<String> strings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private String myString;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* another utility field");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private List<EClass> eClasses;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private List<EClass> classes;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<EClass>> typeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public TypeSystem() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typeDispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"typeImpl\", 3, \"|-\", \":\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public List<String> getStrings() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.strings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setStrings(final List<String> strings) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.strings = strings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String getMyString() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.myString;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setMyString(final String myString) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.myString = myString;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public List<EClass> getEClasses() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.eClasses;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setEClasses(final List<EClass> eClasses) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.eClasses = eClasses;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public List<EClass> getClasses() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.classes;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setClasses(final List<EClass> classes) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.classes = classes;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(new RuleEnvironment(), null, o);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(_environment_, null, o);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeInternal(_environment_, _trace_, o);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(o);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeDispatcher.invoke(_environment_, _trace_, o);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeImpl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject o) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<EClass> _result_ = applyRuleEObjectEClass(G, _subtrace_, o);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"EObjectEClass\") + stringRepForEnv(G) + \" |- \" + stringRep(o) + \" : \" + stringRep(_result_.getFirst()));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleEObjectEClass) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throwRuleFailedException(ruleName(\"EObjectEClass\") + stringRepForEnv(G) + \" |- \" + stringRep(o) + \" : \" + \"EClass\",");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("EOBJECTECLASS,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleEObjectEClass, new ErrorInformation(o));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> applyRuleEObjectEClass(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject o) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EClass _xblockexpression = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("InputOutput.<TypeSystem>println(this);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EObject _clone = this.<EObject>clone(o);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EClass _eClass = _clone.eClass();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("_xblockexpression = (_eClass);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<EClass>(_xblockexpression);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testAccessToThisInExpressionInConclusion, _builder);
  }
  
  @Test
  public void testAccessToInjectedFieldsInExpressionsInConclusion() {
    CharSequence _testAccessToInjectedFieldsInExpressionInConclusion = this.testFiles.testAccessToInjectedFieldsInExpressionInConclusion();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.ErrorInformation;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleFailedException;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.XsemanticsRuntimeSystem;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystem extends XsemanticsRuntimeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String EOBJECTECLASS = \"it.xsemantics.test.rules.EObjectEClass\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* a utility field");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private List<String> strings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private String myString;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* another utility field");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private List<EClass> eClasses;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private List<EClass> classes;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<EClass>> typeDispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public TypeSystem() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("typeDispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"typeImpl\", 3, \"|-\", \":\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public List<String> getStrings() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.strings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setStrings(final List<String> strings) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.strings = strings;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public String getMyString() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.myString;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setMyString(final String myString) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.myString = myString;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public List<EClass> getEClasses() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.eClasses;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setEClasses(final List<EClass> eClasses) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.eClasses = eClasses;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public List<EClass> getClasses() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return this.classes;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void setClasses(final List<EClass> classes) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.classes = classes;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(new RuleEnvironment(), null, o);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type(_environment_, null, o);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<EClass> type(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeInternal(_environment_, _trace_, o);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_type);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeInternal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(o);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return typeDispatcher.invoke(_environment_, _trace_, o);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeImpl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject o) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<EClass> _result_ = applyRuleEObjectEClass(G, _subtrace_, o);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"EObjectEClass\") + stringRepForEnv(G) + \" |- \" + stringRep(o) + \" : \" + stringRep(_result_.getFirst()));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleEObjectEClass) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throwRuleFailedException(ruleName(\"EObjectEClass\") + stringRepForEnv(G) + \" |- \" + stringRep(o) + \" : \" + \"EClass\",");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("EOBJECTECLASS,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleEObjectEClass, new ErrorInformation(o));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> applyRuleEObjectEClass(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject o) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EClass _get = this.classes.get(0);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<EClass>(_get);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testAccessToInjectedFieldsInExpressionInConclusion, _builder);
  }
  
  @Test
  public void testSystemWithValidatorExtends() {
    CharSequence _testCheckRuleWithValidatorExtends = this.testFiles.testCheckRuleWithValidatorExtends();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test.validation;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.google.inject.Inject;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.validation.XsemanticsValidatorErrorGenerator;");
    _builder.newLine();
    _builder.append("import it.xsemantics.test.TypeSystem;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.validation.AbstractDeclarativeValidator;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.validation.Check;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TypeSystemValidator extends AbstractDeclarativeValidator {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected TypeSystem xsemanticsSystem;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Inject");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected XsemanticsValidatorErrorGenerator errorGenerator;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("@Check");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void checkEObject(final EObject obj) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("errorGenerator.generateErrors(this, ");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("xsemanticsSystem.checkEObject(obj),");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("obj);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.assertCorrectJavaCodeGeneration(_testCheckRuleWithValidatorExtends, 
      null, _builder);
  }
  
  @Test
  public void testSystemWithExtends() {
    CharSequence _testJudgmentDescriptionsWithErrorSpecification = this.testFiles.testJudgmentDescriptionsWithErrorSpecification();
    CharSequence _testSystemExtendsSystemWithJudgmentsReferringToEcore = this.testFiles.testSystemExtendsSystemWithJudgmentsReferringToEcore();
    CharSequence _testSystemExtendsExtendedTypeSystem = this.testFiles.testSystemExtendsExtendedTypeSystem();
    XsemanticsSystem _parseWithBaseSystemAndAssertNoError = this.parseWithBaseSystemAndAssertNoError(_testJudgmentDescriptionsWithErrorSpecification, _testSystemExtendsSystemWithJudgmentsReferringToEcore, _testSystemExtendsExtendedTypeSystem);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.xsemantics.test;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.ErrorInformation;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.Result;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleApplicationTrace;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleEnvironment;");
    _builder.newLine();
    _builder.append("import it.xsemantics.runtime.RuleFailedException;");
    _builder.newLine();
    _builder.append("import it.xsemantics.test.ExtendedTypeSystem;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EClass;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.xtext.util.PolymorphicDispatcher;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ExtendedTypeSystem2 extends ExtendedTypeSystem {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String FROMTYPESYSTEM = \"it.xsemantics.test.rules.FromTypeSystem\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String FROMEXTENDEDTYPESYSTEM = \"it.xsemantics.test.rules.FromExtendedTypeSystem\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public final static String FROMTHISTYPESYSTEM = \"it.xsemantics.test.rules.FromThisTypeSystem\";");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("private PolymorphicDispatcher<Result<Boolean>> type2Dispatcher;");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public ExtendedTypeSystem2() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("init();");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void init() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type2Dispatcher = buildPolymorphicDispatcher1(");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("\"type2Impl\", 4, \"||-\", \":\");");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> type2(final EClass c1, final EClass c2) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type2(new RuleEnvironment(), null, c1, c2);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> type2(final RuleEnvironment _environment_, final EClass c1, final EClass c2) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return type2(_environment_, null, c1, c2);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> type2(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c1, final EClass c2) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return type2Internal(_environment_, _trace_, c1, c2);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type2) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(_e_type2);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public Result<Boolean> checkEObject(final EObject o) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return checkEObjectInternal(null, o);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return resultForFailure(e);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> checkEObjectInternal(final RuleApplicationTrace _trace_, final EObject o) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("{");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/* empty |- o : var EClass c */");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EClass c = null;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<EClass> result = typeInternal(emptyEnvironment(), _trace_, o);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("checkAssignableTo(result.getFirst(), EClass.class);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("c = (EClass) result.getFirst();");
    _builder.newLine();
    _builder.append("      ");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("/* empty |- o.eClass <: c */");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("EClass _eClass = o.eClass();");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("subtypeInternal(emptyEnvironment(), _trace_, _eClass, c);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<Boolean>(true);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> type2Internal(final RuleEnvironment _environment_, final RuleApplicationTrace _trace_, final EClass c1, final EClass c2) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("checkParamsNotNull(c1, c2);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return type2Dispatcher.invoke(_environment_, _trace_, c1, c2);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception _e_type2) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("sneakyThrowRuleFailedException(_e_type2);");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> typeImpl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject c) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<EClass> _result_ = applyRuleFromTypeSystem(G, _subtrace_, c);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"FromTypeSystem\") + stringRepForEnv(G) + \" |- \" + stringRep(c) + \" : \" + stringRep(_result_.getFirst()));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleFromTypeSystem) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("typeThrowException(FROMTYPESYSTEM,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleFromTypeSystem, c);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<EClass> applyRuleFromTypeSystem(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EObject c) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/* G |- c.eClass <: c.eClass */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EClass _eClass = c.eClass();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EClass _eClass_1 = c.eClass();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("subtypeInternal(G, _trace_, _eClass, _eClass_1);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EClass _eClass_2 = c.eClass();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<EClass>(_eClass_2);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> subtypeImpl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass c1, final EClass c2) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<Boolean> _result_ = applyRuleFromExtendedTypeSystem(G, _subtrace_, c1, c2);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"FromExtendedTypeSystem\") + stringRepForEnv(G) + \" |- \" + stringRep(c1) + \" <: \" + stringRep(c2));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleFromExtendedTypeSystem) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throwRuleFailedException(ruleName(\"FromExtendedTypeSystem\") + stringRepForEnv(G) + \" |- \" + stringRep(c1) + \" <: \" + stringRep(c2),");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("FROMEXTENDEDTYPESYSTEM,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleFromExtendedTypeSystem, new ErrorInformation(c1), new ErrorInformation(c2));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> applyRuleFromExtendedTypeSystem(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass c1, final EClass c2) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/* G ||- c1 : c2 */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("type2Internal(G, _trace_, c1, c2);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<Boolean>(true);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> type2Impl(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass c1, final EClass c2) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("RuleApplicationTrace _subtrace_ = newTrace(_trace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("Result<Boolean> _result_ = applyRuleFromThisTypeSystem(G, _subtrace_, c1, c2);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addToTrace(_trace_, ruleName(\"FromThisTypeSystem\") + stringRepForEnv(G) + \" ||- \" + stringRep(c1) + \" : \" + stringRep(c2));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("addAsSubtrace(_trace_, _subtrace_);");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return _result_;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} catch (Exception e_applyRuleFromThisTypeSystem) {");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("throwRuleFailedException(ruleName(\"FromThisTypeSystem\") + stringRepForEnv(G) + \" ||- \" + stringRep(c1) + \" : \" + stringRep(c2),");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("FROMTHISTYPESYSTEM,");
    _builder.newLine();
    _builder.append("      \t");
    _builder.append("e_applyRuleFromThisTypeSystem, new ErrorInformation(c1), new ErrorInformation(c2));");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("protected Result<Boolean> applyRuleFromThisTypeSystem(final RuleEnvironment G, final RuleApplicationTrace _trace_, final EClass c1, final EClass c2) throws RuleFailedException {");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/* G |- c1 : var EClass o */");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("EClass o = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Result<EClass> result = typeInternal(G, _trace_, c1);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("checkAssignableTo(result.getFirst(), EClass.class);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("o = (EClass) result.getFirst();");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return new Result<Boolean>(true);");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("package it.xsemantics.test.validation;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import com.google.inject.Inject;");
    _builder_1.newLine();
    _builder_1.append("import it.xsemantics.runtime.validation.XsemanticsBasedDeclarativeValidator;");
    _builder_1.newLine();
    _builder_1.append("import it.xsemantics.test.ExtendedTypeSystem2;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.emf.ecore.EObject;");
    _builder_1.newLine();
    _builder_1.append("import org.eclipse.xtext.validation.Check;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class ExtendedTypeSystem2Validator extends XsemanticsBasedDeclarativeValidator {");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Inject");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("protected ExtendedTypeSystem2 xsemanticsSystem;");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("@Check");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("public void checkEObject(final EObject o) {");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("generateErrors(");
    _builder_1.newLine();
    _builder_1.append("    \t");
    _builder_1.append("xsemanticsSystem.checkEObject(o),");
    _builder_1.newLine();
    _builder_1.append("    \t\t");
    _builder_1.append("o);");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    this.assertCorrectJavaCodeGeneration(_parseWithBaseSystemAndAssertNoError, 
      "ExtendedTypeSystem2", _builder, _builder_1);
  }
  
  private void assertCorrectJavaCodeGeneration(final CharSequence input, final CharSequence expected) {
    this.assertCorrectJavaCodeGeneration(input, expected, null);
  }
  
  private void assertCorrectJavaCodeGeneration(final CharSequence input, final CharSequence expected, final CharSequence expectedValidator) {
    XsemanticsSystem _parse = this.parse(input);
    this.assertCorrectJavaCodeGeneration(_parse, null, expected, expectedValidator);
  }
  
  private void assertCorrectJavaCodeGeneration(final XsemanticsSystem system, final String prefix, final CharSequence expected, final CharSequence expectedValidator) {
    final Procedure1<Result> _function = new Procedure1<Result>() {
        public void apply(final Result it) {
          Map<String,CharSequence> _allGeneratedResources = it.getAllGeneratedResources();
          Set<Entry<String,CharSequence>> _entrySet = _allGeneratedResources.entrySet();
          for (final Entry<String,CharSequence> e : _entrySet) {
            boolean _or = false;
            boolean _equals = Objects.equal(prefix, null);
            if (_equals) {
              _or = true;
            } else {
              String _key = e.getKey();
              boolean _contains = _key.contains(prefix);
              _or = (_equals || _contains);
            }
            if (_or) {
              boolean _and = false;
              String _key_1 = e.getKey();
              boolean _endsWith = _key_1.endsWith("Validator.java");
              if (!_endsWith) {
                _and = false;
              } else {
                boolean _notEquals = (!Objects.equal(expectedValidator, null));
                _and = (_endsWith && _notEquals);
              }
              if (_and) {
                String _string = expectedValidator.toString();
                CharSequence _value = e.getValue();
                String _string_1 = _value.toString();
                Assert.assertEquals(_string, _string_1);
              } else {
                boolean _and_1 = false;
                String _key_2 = e.getKey();
                boolean _endsWith_1 = _key_2.endsWith("Validator.java");
                boolean _not = (!_endsWith_1);
                if (!_not) {
                  _and_1 = false;
                } else {
                  boolean _notEquals_1 = (!Objects.equal(expected, null));
                  _and_1 = (_not && _notEquals_1);
                }
                if (_and_1) {
                  String _string_2 = expected.toString();
                  CharSequence _value_1 = e.getValue();
                  String _string_3 = _value_1.toString();
                  Assert.assertEquals(_string_2, _string_3);
                }
              }
            }
          }
          it.compileToJava();
        }
      };
    this._xsemanticsCompilationTestHelper.compileAll(system, new IAcceptor<Result>() {
        public void accept(Result t) {
          _function.apply(t);
        }
    });
  }
}
