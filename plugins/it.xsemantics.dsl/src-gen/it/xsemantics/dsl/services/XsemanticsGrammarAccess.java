/*
* generated by Xtext
*/
package it.xsemantics.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XsemanticsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class XsemanticsSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XsemanticsSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperSystemAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperSystemJvmParameterizedTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cSuperSystemAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValidatorExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValidatorExtendsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValidatorExtendsJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cValidatorExtendsAssignment_3_1.eContents().get(0);
		private final Assignment cImportSectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_4_0 = (RuleCall)cImportSectionAssignment_4.eContents().get(0);
		private final Assignment cInjectionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInjectionsInjectedParserRuleCall_5_0 = (RuleCall)cInjectionsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAuxiliaryKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cAuxiliaryDescriptionsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cAuxiliaryDescriptionsAuxiliaryDescriptionParserRuleCall_6_2_0 = (RuleCall)cAuxiliaryDescriptionsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cJudgmentsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cJudgmentDescriptionsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cJudgmentDescriptionsJudgmentDescriptionParserRuleCall_7_2_0 = (RuleCall)cJudgmentDescriptionsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Assignment cAuxiliaryFunctionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAuxiliaryFunctionsAuxiliaryFunctionParserRuleCall_8_0 = (RuleCall)cAuxiliaryFunctionsAssignment_8.eContents().get(0);
		private final Assignment cRulesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cRulesRuleParserRuleCall_9_0 = (RuleCall)cRulesAssignment_9.eContents().get(0);
		private final Assignment cCheckrulesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCheckrulesCheckRuleParserRuleCall_10_0 = (RuleCall)cCheckrulesAssignment_10.eContents().get(0);
		
		//XsemanticsSystem:
		//	"system" name=QualifiedName ("extends" superSystem=JvmParameterizedTypeReference)? ("validatorExtends"
		//	validatorExtends=JvmParameterizedTypeReference)? importSection=XImportSection? injections+=Injected* ("auxiliary" "{"
		//	auxiliaryDescriptions+=AuxiliaryDescription+ "}")? ("judgments" "{" judgmentDescriptions+=JudgmentDescription+ "}")?
		//	auxiliaryFunctions+=AuxiliaryFunction* rules+=Rule* checkrules+=CheckRule*;
		public ParserRule getRule() { return rule; }

		//"system" name=QualifiedName ("extends" superSystem=JvmParameterizedTypeReference)? ("validatorExtends"
		//validatorExtends=JvmParameterizedTypeReference)? importSection=XImportSection? injections+=Injected* ("auxiliary" "{"
		//auxiliaryDescriptions+=AuxiliaryDescription+ "}")? ("judgments" "{" judgmentDescriptions+=JudgmentDescription+ "}")?
		//auxiliaryFunctions+=AuxiliaryFunction* rules+=Rule* checkrules+=CheckRule*
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//("extends" superSystem=JvmParameterizedTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superSystem=JvmParameterizedTypeReference
		public Assignment getSuperSystemAssignment_2_1() { return cSuperSystemAssignment_2_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperSystemJvmParameterizedTypeReferenceParserRuleCall_2_1_0() { return cSuperSystemJvmParameterizedTypeReferenceParserRuleCall_2_1_0; }

		//("validatorExtends" validatorExtends=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"validatorExtends"
		public Keyword getValidatorExtendsKeyword_3_0() { return cValidatorExtendsKeyword_3_0; }

		//validatorExtends=JvmParameterizedTypeReference
		public Assignment getValidatorExtendsAssignment_3_1() { return cValidatorExtendsAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getValidatorExtendsJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cValidatorExtendsJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_4() { return cImportSectionAssignment_4; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_4_0() { return cImportSectionXImportSectionParserRuleCall_4_0; }

		//injections+=Injected*
		public Assignment getInjectionsAssignment_5() { return cInjectionsAssignment_5; }

		//Injected
		public RuleCall getInjectionsInjectedParserRuleCall_5_0() { return cInjectionsInjectedParserRuleCall_5_0; }

		//("auxiliary" "{" auxiliaryDescriptions+=AuxiliaryDescription+ "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"auxiliary"
		public Keyword getAuxiliaryKeyword_6_0() { return cAuxiliaryKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//auxiliaryDescriptions+=AuxiliaryDescription+
		public Assignment getAuxiliaryDescriptionsAssignment_6_2() { return cAuxiliaryDescriptionsAssignment_6_2; }

		//AuxiliaryDescription
		public RuleCall getAuxiliaryDescriptionsAuxiliaryDescriptionParserRuleCall_6_2_0() { return cAuxiliaryDescriptionsAuxiliaryDescriptionParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }

		//("judgments" "{" judgmentDescriptions+=JudgmentDescription+ "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"judgments"
		public Keyword getJudgmentsKeyword_7_0() { return cJudgmentsKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//judgmentDescriptions+=JudgmentDescription+
		public Assignment getJudgmentDescriptionsAssignment_7_2() { return cJudgmentDescriptionsAssignment_7_2; }

		//JudgmentDescription
		public RuleCall getJudgmentDescriptionsJudgmentDescriptionParserRuleCall_7_2_0() { return cJudgmentDescriptionsJudgmentDescriptionParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//auxiliaryFunctions+=AuxiliaryFunction*
		public Assignment getAuxiliaryFunctionsAssignment_8() { return cAuxiliaryFunctionsAssignment_8; }

		//AuxiliaryFunction
		public RuleCall getAuxiliaryFunctionsAuxiliaryFunctionParserRuleCall_8_0() { return cAuxiliaryFunctionsAuxiliaryFunctionParserRuleCall_8_0; }

		//rules+=Rule*
		public Assignment getRulesAssignment_9() { return cRulesAssignment_9; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_9_0() { return cRulesRuleParserRuleCall_9_0; }

		//checkrules+=CheckRule*
		public Assignment getCheckrulesAssignment_10() { return cCheckrulesAssignment_10; }

		//CheckRule
		public RuleCall getCheckrulesCheckRuleParserRuleCall_10_0() { return cCheckrulesCheckRuleParserRuleCall_10_0; }
	}

	public class InjectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Injected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInjectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Injected:
		//	"inject" type=JvmTypeReference name=ValidID;
		public ParserRule getRule() { return rule; }

		//"inject" type=JvmTypeReference name=ValidID
		public Group getGroup() { return cGroup; }

		//"inject"
		public Keyword getInjectKeyword_0() { return cInjectKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
	}

	public class AuxiliaryDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AuxiliaryDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Assignment cErrorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cErrorErrorSpecificationParserRuleCall_5_0 = (RuleCall)cErrorAssignment_5.eContents().get(0);
		
		//AuxiliaryDescription:
		//	name=ID "(" (parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)? ")" (":"
		//	type=JvmTypeReference)? error=ErrorSpecification?;
		public ParserRule getRule() { return rule; }

		//name=ID "(" (parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)? ")" (":"
		//type=JvmTypeReference)? error=ErrorSpecification?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_2_0_0() { return cParametersFullJvmFormalParameterParserRuleCall_2_0_0; }

		//("," parameters+=FullJvmFormalParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_2_1_1_0() { return cParametersFullJvmFormalParameterParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(":" type=JvmTypeReference)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_4_1_0() { return cTypeJvmTypeReferenceParserRuleCall_4_1_0; }

		//error=ErrorSpecification?
		public Assignment getErrorAssignment_5() { return cErrorAssignment_5; }

		//ErrorSpecification
		public RuleCall getErrorErrorSpecificationParserRuleCall_5_0() { return cErrorErrorSpecificationParserRuleCall_5_0; }
	}

	public class JudgmentDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JudgmentDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cJudgmentSymbolAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cJudgmentSymbolJudgmentSymbolParserRuleCall_2_0 = (RuleCall)cJudgmentSymbolAssignment_2.eContents().get(0);
		private final Assignment cJudgmentParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJudgmentParametersJudgmentParameterParserRuleCall_3_0 = (RuleCall)cJudgmentParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cRelationSymbolsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cRelationSymbolsRelationSymbolParserRuleCall_4_0_0 = (RuleCall)cRelationSymbolsAssignment_4_0.eContents().get(0);
		private final Assignment cJudgmentParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cJudgmentParametersJudgmentParameterParserRuleCall_4_1_0 = (RuleCall)cJudgmentParametersAssignment_4_1.eContents().get(0);
		private final Assignment cErrorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cErrorErrorSpecificationParserRuleCall_5_0 = (RuleCall)cErrorAssignment_5.eContents().get(0);
		
		//JudgmentDescription:
		//	override?="override"? name=ID judgmentSymbol=JudgmentSymbol judgmentParameters+=JudgmentParameter
		//	(relationSymbols+=RelationSymbol judgmentParameters+=JudgmentParameter)* error=ErrorSpecification?;
		public ParserRule getRule() { return rule; }

		//override?="override"? name=ID judgmentSymbol=JudgmentSymbol judgmentParameters+=JudgmentParameter
		//(relationSymbols+=RelationSymbol judgmentParameters+=JudgmentParameter)* error=ErrorSpecification?
		public Group getGroup() { return cGroup; }

		//override?="override"?
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }

		//"override"
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//judgmentSymbol=JudgmentSymbol
		public Assignment getJudgmentSymbolAssignment_2() { return cJudgmentSymbolAssignment_2; }

		//JudgmentSymbol
		public RuleCall getJudgmentSymbolJudgmentSymbolParserRuleCall_2_0() { return cJudgmentSymbolJudgmentSymbolParserRuleCall_2_0; }

		//judgmentParameters+=JudgmentParameter
		public Assignment getJudgmentParametersAssignment_3() { return cJudgmentParametersAssignment_3; }

		//JudgmentParameter
		public RuleCall getJudgmentParametersJudgmentParameterParserRuleCall_3_0() { return cJudgmentParametersJudgmentParameterParserRuleCall_3_0; }

		//(relationSymbols+=RelationSymbol judgmentParameters+=JudgmentParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//relationSymbols+=RelationSymbol
		public Assignment getRelationSymbolsAssignment_4_0() { return cRelationSymbolsAssignment_4_0; }

		//RelationSymbol
		public RuleCall getRelationSymbolsRelationSymbolParserRuleCall_4_0_0() { return cRelationSymbolsRelationSymbolParserRuleCall_4_0_0; }

		//judgmentParameters+=JudgmentParameter
		public Assignment getJudgmentParametersAssignment_4_1() { return cJudgmentParametersAssignment_4_1; }

		//JudgmentParameter
		public RuleCall getJudgmentParametersJudgmentParameterParserRuleCall_4_1_0() { return cJudgmentParametersJudgmentParameterParserRuleCall_4_1_0; }

		//error=ErrorSpecification?
		public Assignment getErrorAssignment_5() { return cErrorAssignment_5; }

		//ErrorSpecification
		public RuleCall getErrorErrorSpecificationParserRuleCall_5_0() { return cErrorErrorSpecificationParserRuleCall_5_0; }
	}

	public class JudgmentParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JudgmentParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOutputParameterAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cOutputKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cJvmTypeReferenceAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cJvmTypeReferenceJvmTypeReferenceParserRuleCall_0_2_0 = (RuleCall)cJvmTypeReferenceAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInputParameterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cParameterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterFullJvmFormalParameterParserRuleCall_1_1_0 = (RuleCall)cParameterAssignment_1_1.eContents().get(0);
		
		//JudgmentParameter:
		//	{OutputParameter} "output" jvmTypeReference=JvmTypeReference | {InputParameter} parameter=FullJvmFormalParameter;
		public ParserRule getRule() { return rule; }

		//{OutputParameter} "output" jvmTypeReference=JvmTypeReference | {InputParameter} parameter=FullJvmFormalParameter
		public Alternatives getAlternatives() { return cAlternatives; }

		//{OutputParameter} "output" jvmTypeReference=JvmTypeReference
		public Group getGroup_0() { return cGroup_0; }

		//{OutputParameter}
		public Action getOutputParameterAction_0_0() { return cOutputParameterAction_0_0; }

		//"output"
		public Keyword getOutputKeyword_0_1() { return cOutputKeyword_0_1; }

		//jvmTypeReference=JvmTypeReference
		public Assignment getJvmTypeReferenceAssignment_0_2() { return cJvmTypeReferenceAssignment_0_2; }

		//JvmTypeReference
		public RuleCall getJvmTypeReferenceJvmTypeReferenceParserRuleCall_0_2_0() { return cJvmTypeReferenceJvmTypeReferenceParserRuleCall_0_2_0; }

		//{InputParameter} parameter=FullJvmFormalParameter
		public Group getGroup_1() { return cGroup_1; }

		//{InputParameter}
		public Action getInputParameterAction_1_0() { return cInputParameterAction_1_0; }

		//parameter=FullJvmFormalParameter
		public Assignment getParameterAssignment_1_1() { return cParameterAssignment_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParameterFullJvmFormalParameterParserRuleCall_1_1_0() { return cParameterFullJvmFormalParameterParserRuleCall_1_1_0; }
	}

	public class AuxiliaryFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AuxiliaryFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAuxiliaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//AuxiliaryFunction:
		//	"auxiliary" name=ID "(" (parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)? ")"
		//	body=XExpression;
		public ParserRule getRule() { return rule; }

		//"auxiliary" name=ID "(" (parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)? ")"
		//body=XExpression
		public Group getGroup() { return cGroup; }

		//"auxiliary"
		public Keyword getAuxiliaryKeyword_0() { return cAuxiliaryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_3_0_0() { return cParametersFullJvmFormalParameterParserRuleCall_3_0_0; }

		//("," parameters+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//parameters+=FullJvmFormalParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParametersFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParametersFullJvmFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=XExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_5_0() { return cBodyXExpressionParserRuleCall_5_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAxiomParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRuleWithPremisesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Rule:
		//	Axiom | RuleWithPremises;
		public ParserRule getRule() { return rule; }

		//Axiom | RuleWithPremises
		public Alternatives getAlternatives() { return cAlternatives; }

		//Axiom
		public RuleCall getAxiomParserRuleCall_0() { return cAxiomParserRuleCall_0; }

		//RuleWithPremises
		public RuleCall getRuleWithPremisesParserRuleCall_1() { return cRuleWithPremisesParserRuleCall_1; }
	}

	public class AxiomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Axiom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Keyword cAxiomKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cConclusionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConclusionRuleConclusionParserRuleCall_3_0 = (RuleCall)cConclusionAssignment_3.eContents().get(0);
		
		//Axiom:
		//	override?="override"? "axiom" name=ID conclusion=RuleConclusion;
		public ParserRule getRule() { return rule; }

		//override?="override"? "axiom" name=ID conclusion=RuleConclusion
		public Group getGroup() { return cGroup; }

		//override?="override"?
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }

		//"override"
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }

		//"axiom"
		public Keyword getAxiomKeyword_1() { return cAxiomKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//conclusion=RuleConclusion
		public Assignment getConclusionAssignment_3() { return cConclusionAssignment_3; }

		//RuleConclusion
		public RuleCall getConclusionRuleConclusionParserRuleCall_3_0() { return cConclusionRuleConclusionParserRuleCall_3_0; }
	}

	public class RuleWithPremisesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleWithPremises");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Keyword cRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cDerivesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConclusionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConclusionRuleConclusionParserRuleCall_4_0 = (RuleCall)cConclusionAssignment_4.eContents().get(0);
		private final Keyword cFromKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPremisesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPremisesXBlockExpressionParserRuleCall_6_0 = (RuleCall)cPremisesAssignment_6.eContents().get(0);
		
		//RuleWithPremises:
		//	override?="override"? "rule" name=ID "derives"? conclusion=RuleConclusion "from" premises=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//override?="override"? "rule" name=ID "derives"? conclusion=RuleConclusion "from" premises=XBlockExpression
		public Group getGroup() { return cGroup; }

		//override?="override"?
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }

		//"override"
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }

		//"rule"
		public Keyword getRuleKeyword_1() { return cRuleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"derives"?
		public Keyword getDerivesKeyword_3() { return cDerivesKeyword_3; }

		//conclusion=RuleConclusion
		public Assignment getConclusionAssignment_4() { return cConclusionAssignment_4; }

		//RuleConclusion
		public RuleCall getConclusionRuleConclusionParserRuleCall_4_0() { return cConclusionRuleConclusionParserRuleCall_4_0; }

		//"from"
		public Keyword getFromKeyword_5() { return cFromKeyword_5; }

		//premises=XBlockExpression
		public Assignment getPremisesAssignment_6() { return cPremisesAssignment_6; }

		//XBlockExpression
		public RuleCall getPremisesXBlockExpressionParserRuleCall_6_0() { return cPremisesXBlockExpressionParserRuleCall_6_0; }
	}

	public class CheckRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CheckRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOverrideAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOverrideOverrideKeyword_0_0 = (Keyword)cOverrideAssignment_0.eContents().get(0);
		private final Keyword cCheckruleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementRuleParameterParserRuleCall_4_0 = (RuleCall)cElementAssignment_4.eContents().get(0);
		private final Keyword cFromKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPremisesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPremisesXBlockExpressionParserRuleCall_6_0 = (RuleCall)cPremisesAssignment_6.eContents().get(0);
		
		//CheckRule:
		//	override?="override"? "checkrule" name=ID "for" element=RuleParameter "from" premises=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//override?="override"? "checkrule" name=ID "for" element=RuleParameter "from" premises=XBlockExpression
		public Group getGroup() { return cGroup; }

		//override?="override"?
		public Assignment getOverrideAssignment_0() { return cOverrideAssignment_0; }

		//"override"
		public Keyword getOverrideOverrideKeyword_0_0() { return cOverrideOverrideKeyword_0_0; }

		//"checkrule"
		public Keyword getCheckruleKeyword_1() { return cCheckruleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"for"
		public Keyword getForKeyword_3() { return cForKeyword_3; }

		//element=RuleParameter
		public Assignment getElementAssignment_4() { return cElementAssignment_4; }

		//RuleParameter
		public RuleCall getElementRuleParameterParserRuleCall_4_0() { return cElementRuleParameterParserRuleCall_4_0; }

		//"from"
		public Keyword getFromKeyword_5() { return cFromKeyword_5; }

		//premises=XBlockExpression
		public Assignment getPremisesAssignment_6() { return cPremisesAssignment_6; }

		//XBlockExpression
		public RuleCall getPremisesXBlockExpressionParserRuleCall_6_0() { return cPremisesXBlockExpressionParserRuleCall_6_0; }
	}

	public class RuleConclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleConclusion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnvironmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentParserRuleCall_0_0 = (RuleCall)cEnvironmentAssignment_0.eContents().get(0);
		private final Assignment cJudgmentSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJudgmentSymbolJudgmentSymbolParserRuleCall_1_0 = (RuleCall)cJudgmentSymbolAssignment_1.eContents().get(0);
		private final Assignment cConclusionElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConclusionElementsRuleConclusionElementParserRuleCall_2_0 = (RuleCall)cConclusionElementsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRelationSymbolsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRelationSymbolsRelationSymbolParserRuleCall_3_0_0 = (RuleCall)cRelationSymbolsAssignment_3_0.eContents().get(0);
		private final Assignment cConclusionElementsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConclusionElementsRuleConclusionElementParserRuleCall_3_1_0 = (RuleCall)cConclusionElementsAssignment_3_1.eContents().get(0);
		private final Assignment cErrorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cErrorErrorSpecificationParserRuleCall_4_0 = (RuleCall)cErrorAssignment_4.eContents().get(0);
		
		//RuleConclusion:
		//	environment=Environment judgmentSymbol=JudgmentSymbol conclusionElements+=RuleConclusionElement
		//	(relationSymbols+=RelationSymbol conclusionElements+=RuleConclusionElement)* error=ErrorSpecification?;
		public ParserRule getRule() { return rule; }

		//environment=Environment judgmentSymbol=JudgmentSymbol conclusionElements+=RuleConclusionElement
		//(relationSymbols+=RelationSymbol conclusionElements+=RuleConclusionElement)* error=ErrorSpecification?
		public Group getGroup() { return cGroup; }

		//environment=Environment
		public Assignment getEnvironmentAssignment_0() { return cEnvironmentAssignment_0; }

		//Environment
		public RuleCall getEnvironmentEnvironmentParserRuleCall_0_0() { return cEnvironmentEnvironmentParserRuleCall_0_0; }

		//judgmentSymbol=JudgmentSymbol
		public Assignment getJudgmentSymbolAssignment_1() { return cJudgmentSymbolAssignment_1; }

		//JudgmentSymbol
		public RuleCall getJudgmentSymbolJudgmentSymbolParserRuleCall_1_0() { return cJudgmentSymbolJudgmentSymbolParserRuleCall_1_0; }

		//conclusionElements+=RuleConclusionElement
		public Assignment getConclusionElementsAssignment_2() { return cConclusionElementsAssignment_2; }

		//RuleConclusionElement
		public RuleCall getConclusionElementsRuleConclusionElementParserRuleCall_2_0() { return cConclusionElementsRuleConclusionElementParserRuleCall_2_0; }

		//(relationSymbols+=RelationSymbol conclusionElements+=RuleConclusionElement)*
		public Group getGroup_3() { return cGroup_3; }

		//relationSymbols+=RelationSymbol
		public Assignment getRelationSymbolsAssignment_3_0() { return cRelationSymbolsAssignment_3_0; }

		//RelationSymbol
		public RuleCall getRelationSymbolsRelationSymbolParserRuleCall_3_0_0() { return cRelationSymbolsRelationSymbolParserRuleCall_3_0_0; }

		//conclusionElements+=RuleConclusionElement
		public Assignment getConclusionElementsAssignment_3_1() { return cConclusionElementsAssignment_3_1; }

		//RuleConclusionElement
		public RuleCall getConclusionElementsRuleConclusionElementParserRuleCall_3_1_0() { return cConclusionElementsRuleConclusionElementParserRuleCall_3_1_0; }

		//error=ErrorSpecification?
		public Assignment getErrorAssignment_4() { return cErrorAssignment_4; }

		//ErrorSpecification
		public RuleCall getErrorErrorSpecificationParserRuleCall_4_0() { return cErrorErrorSpecificationParserRuleCall_4_0; }
	}

	public class XExpressionInsideBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionInsideBlock");
		private final RuleCall cPremiseExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//XExpressionInsideBlock returns xbase::XExpression:
		//	PremiseExpression;
		public ParserRule getRule() { return rule; }

		//PremiseExpression
		public RuleCall getPremiseExpressionParserRuleCall() { return cPremiseExpressionParserRuleCall; }
	}

	public class PremiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PremiseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalPremiseExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cOrExpressionBranchesAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cOrKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cBranchesAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cBranchesXExpressionInsideBlockParserRuleCall_1_0_2_0 = (RuleCall)cBranchesAssignment_1_0_2.eContents().get(0);
		
		//PremiseExpression returns xbase::XExpression:
		//	TerminalPremiseExpression => ({OrExpression.branches+=current} "or" branches+=XExpressionInsideBlock)*;
		public ParserRule getRule() { return rule; }

		//TerminalPremiseExpression => ({OrExpression.branches+=current} "or" branches+=XExpressionInsideBlock)*
		public Group getGroup() { return cGroup; }

		//TerminalPremiseExpression
		public RuleCall getTerminalPremiseExpressionParserRuleCall_0() { return cTerminalPremiseExpressionParserRuleCall_0; }

		//=> ({OrExpression.branches+=current} "or" branches+=XExpressionInsideBlock)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.branches+=current} "or" branches+=XExpressionInsideBlock
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{OrExpression.branches+=current}
		public Action getOrExpressionBranchesAction_1_0_0() { return cOrExpressionBranchesAction_1_0_0; }

		//"or"
		public Keyword getOrKeyword_1_0_1() { return cOrKeyword_1_0_1; }

		//branches+=XExpressionInsideBlock
		public Assignment getBranchesAssignment_1_0_2() { return cBranchesAssignment_1_0_2; }

		//XExpressionInsideBlock
		public RuleCall getBranchesXExpressionInsideBlockParserRuleCall_1_0_2_0() { return cBranchesXExpressionInsideBlockParserRuleCall_1_0_2_0; }
	}

	public class TerminalPremiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalPremiseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleInvocationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFailAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cFailKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cErrorAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cErrorErrorSpecificationParserRuleCall_1_2_0 = (RuleCall)cErrorAssignment_1_2.eContents().get(0);
		private final RuleCall cXVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TerminalPremiseExpression returns xbase::XExpression:
		//	RuleInvocation | {Fail} "fail" error=ErrorSpecification? | XVariableDeclaration | XExpression;
		public ParserRule getRule() { return rule; }

		//RuleInvocation | {Fail} "fail" error=ErrorSpecification? | XVariableDeclaration | XExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//RuleInvocation
		public RuleCall getRuleInvocationParserRuleCall_0() { return cRuleInvocationParserRuleCall_0; }

		//{Fail} "fail" error=ErrorSpecification?
		public Group getGroup_1() { return cGroup_1; }

		//{Fail}
		public Action getFailAction_1_0() { return cFailAction_1_0; }

		//"fail"
		public Keyword getFailKeyword_1_1() { return cFailKeyword_1_1; }

		//error=ErrorSpecification?
		public Assignment getErrorAssignment_1_2() { return cErrorAssignment_1_2; }

		//ErrorSpecification
		public RuleCall getErrorErrorSpecificationParserRuleCall_1_2_0() { return cErrorErrorSpecificationParserRuleCall_1_2_0; }

		//XVariableDeclaration
		public RuleCall getXVariableDeclarationParserRuleCall_2() { return cXVariableDeclarationParserRuleCall_2; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_3() { return cXExpressionParserRuleCall_3; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnvironmentAccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXClosureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXNumberLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXNullLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXTypeLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//XLiteral returns xbase::XExpression:
		//	EnvironmentAccess | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
		public ParserRule getRule() { return rule; }

		//EnvironmentAccess | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnvironmentAccess
		public RuleCall getEnvironmentAccessParserRuleCall_0() { return cEnvironmentAccessParserRuleCall_0; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_1() { return cXClosureParserRuleCall_1; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_2() { return cXBooleanLiteralParserRuleCall_2; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_3() { return cXNumberLiteralParserRuleCall_3; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_4() { return cXNullLiteralParserRuleCall_4; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_5() { return cXStringLiteralParserRuleCall_5; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_6() { return cXTypeLiteralParserRuleCall_6; }
	}

	public class EnvironmentAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentAccessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnvKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEnvironmentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEnvironmentEnvironmentCrossReference_3_0 = (CrossReference)cEnvironmentAssignment_3.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentIDTerminalRuleCall_3_0_1 = (RuleCall)cEnvironmentEnvironmentCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArgumentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgumentXExpressionParserRuleCall_5_0 = (RuleCall)cArgumentAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_7_0 = (RuleCall)cTypeAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//EnvironmentAccess returns xbase::XExpression:
		//	{EnvironmentAccess} "env" "(" environment=[Environment] "," argument=XExpression "," type=JvmTypeReference ")";
		public ParserRule getRule() { return rule; }

		//{EnvironmentAccess} "env" "(" environment=[Environment] "," argument=XExpression "," type=JvmTypeReference ")"
		public Group getGroup() { return cGroup; }

		//{EnvironmentAccess}
		public Action getEnvironmentAccessAction_0() { return cEnvironmentAccessAction_0; }

		//"env"
		public Keyword getEnvKeyword_1() { return cEnvKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//environment=[Environment]
		public Assignment getEnvironmentAssignment_3() { return cEnvironmentAssignment_3; }

		//[Environment]
		public CrossReference getEnvironmentEnvironmentCrossReference_3_0() { return cEnvironmentEnvironmentCrossReference_3_0; }

		//ID
		public RuleCall getEnvironmentEnvironmentIDTerminalRuleCall_3_0_1() { return cEnvironmentEnvironmentIDTerminalRuleCall_3_0_1; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//argument=XExpression
		public Assignment getArgumentAssignment_5() { return cArgumentAssignment_5; }

		//XExpression
		public RuleCall getArgumentXExpressionParserRuleCall_5_0() { return cArgumentXExpressionParserRuleCall_5_0; }

		//","
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_7_0() { return cTypeJvmTypeReferenceParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class RuleInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnvironmentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentSpecificationParserRuleCall_0_0 = (RuleCall)cEnvironmentAssignment_0.eContents().get(0);
		private final Assignment cJudgmentSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cJudgmentSymbolJudgmentSymbolParserRuleCall_1_0 = (RuleCall)cJudgmentSymbolAssignment_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionsRuleInvocationExpressionParserRuleCall_2_0 = (RuleCall)cExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRelationSymbolsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRelationSymbolsRelationSymbolParserRuleCall_3_0_0 = (RuleCall)cRelationSymbolsAssignment_3_0.eContents().get(0);
		private final Assignment cExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionsRuleInvocationExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionsAssignment_3_1.eContents().get(0);
		
		////	(error=ErrorSpecification)? we don't need it: we can use or fail error...
		//RuleInvocation:
		//	=> environment=EnvironmentSpecification judgmentSymbol=JudgmentSymbol expressions+=RuleInvocationExpression
		//	(relationSymbols+=RelationSymbol expressions+=RuleInvocationExpression)*;
		public ParserRule getRule() { return rule; }

		//=> environment=EnvironmentSpecification judgmentSymbol=JudgmentSymbol expressions+=RuleInvocationExpression
		//(relationSymbols+=RelationSymbol expressions+=RuleInvocationExpression)*
		public Group getGroup() { return cGroup; }

		//=> environment=EnvironmentSpecification
		public Assignment getEnvironmentAssignment_0() { return cEnvironmentAssignment_0; }

		//EnvironmentSpecification
		public RuleCall getEnvironmentEnvironmentSpecificationParserRuleCall_0_0() { return cEnvironmentEnvironmentSpecificationParserRuleCall_0_0; }

		//judgmentSymbol=JudgmentSymbol
		public Assignment getJudgmentSymbolAssignment_1() { return cJudgmentSymbolAssignment_1; }

		//JudgmentSymbol
		public RuleCall getJudgmentSymbolJudgmentSymbolParserRuleCall_1_0() { return cJudgmentSymbolJudgmentSymbolParserRuleCall_1_0; }

		//expressions+=RuleInvocationExpression
		public Assignment getExpressionsAssignment_2() { return cExpressionsAssignment_2; }

		//RuleInvocationExpression
		public RuleCall getExpressionsRuleInvocationExpressionParserRuleCall_2_0() { return cExpressionsRuleInvocationExpressionParserRuleCall_2_0; }

		//(relationSymbols+=RelationSymbol expressions+=RuleInvocationExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//relationSymbols+=RelationSymbol
		public Assignment getRelationSymbolsAssignment_3_0() { return cRelationSymbolsAssignment_3_0; }

		//RelationSymbol
		public RuleCall getRelationSymbolsRelationSymbolParserRuleCall_3_0_0() { return cRelationSymbolsRelationSymbolParserRuleCall_3_0_0; }

		//expressions+=RuleInvocationExpression
		public Assignment getExpressionsAssignment_3_1() { return cExpressionsAssignment_3_1; }

		//RuleInvocationExpression
		public RuleCall getExpressionsRuleInvocationExpressionParserRuleCall_3_1_0() { return cExpressionsRuleInvocationExpressionParserRuleCall_3_1_0; }
	}

	public class RuleInvocationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleInvocationExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cExpressionAlternatives_0 = (Alternatives)cExpressionAssignment.eContents().get(0);
		private final RuleCall cExpressionXVariableDeclarationParserRuleCall_0_0 = (RuleCall)cExpressionAlternatives_0.eContents().get(0);
		private final RuleCall cExpressionXExpressionParserRuleCall_0_1 = (RuleCall)cExpressionAlternatives_0.eContents().get(1);
		
		//RuleInvocationExpression:
		//	=> expression=(XVariableDeclaration | XExpression);
		public ParserRule getRule() { return rule; }

		//=> expression=(XVariableDeclaration | XExpression)
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//XVariableDeclaration | XExpression
		public Alternatives getExpressionAlternatives_0() { return cExpressionAlternatives_0; }

		//XVariableDeclaration
		public RuleCall getExpressionXVariableDeclarationParserRuleCall_0_0() { return cExpressionXVariableDeclarationParserRuleCall_0_0; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_0_1() { return cExpressionXExpressionParserRuleCall_0_1; }
	}

	public class EnvironmentSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalEnvironmentSpecificationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cEnvironmentCompositionCurrentEnvironmentAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final RuleCall cEnvironmentCompositionParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cSubEnvironmentAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSubEnvironmentEnvironmentSpecificationParserRuleCall_1_0_2_0 = (RuleCall)cSubEnvironmentAssignment_1_0_2.eContents().get(0);
		
		//EnvironmentSpecification:
		//	TerminalEnvironmentSpecification => ({EnvironmentComposition.currentEnvironment=current} EnvironmentComposition
		//	subEnvironment=EnvironmentSpecification)*;
		public ParserRule getRule() { return rule; }

		//TerminalEnvironmentSpecification => ({EnvironmentComposition.currentEnvironment=current} EnvironmentComposition
		//subEnvironment=EnvironmentSpecification)*
		public Group getGroup() { return cGroup; }

		//TerminalEnvironmentSpecification
		public RuleCall getTerminalEnvironmentSpecificationParserRuleCall_0() { return cTerminalEnvironmentSpecificationParserRuleCall_0; }

		//=> ({EnvironmentComposition.currentEnvironment=current} EnvironmentComposition subEnvironment=EnvironmentSpecification)*
		public Group getGroup_1() { return cGroup_1; }

		//{EnvironmentComposition.currentEnvironment=current} EnvironmentComposition subEnvironment=EnvironmentSpecification
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{EnvironmentComposition.currentEnvironment=current}
		public Action getEnvironmentCompositionCurrentEnvironmentAction_1_0_0() { return cEnvironmentCompositionCurrentEnvironmentAction_1_0_0; }

		//EnvironmentComposition
		public RuleCall getEnvironmentCompositionParserRuleCall_1_0_1() { return cEnvironmentCompositionParserRuleCall_1_0_1; }

		//subEnvironment=EnvironmentSpecification
		public Assignment getSubEnvironmentAssignment_1_0_2() { return cSubEnvironmentAssignment_1_0_2; }

		//EnvironmentSpecification
		public RuleCall getSubEnvironmentEnvironmentSpecificationParserRuleCall_1_0_2_0() { return cSubEnvironmentEnvironmentSpecificationParserRuleCall_1_0_2_0; }
	}

	public class TerminalEnvironmentSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalEnvironmentSpecification");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEmptyEnvironmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEmptyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEnvironmentMappingAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cKeyAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cKeyXExpressionParserRuleCall_1_1_0 = (RuleCall)cKeyAssignment_1_1.eContents().get(0);
		private final RuleCall cEnvironmentMapsToParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueXExpressionParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final RuleCall cEnvironmentReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TerminalEnvironmentSpecification returns EnvironmentSpecification:
		//	{EmptyEnvironment} "empty" | {EnvironmentMapping} key=XExpression EnvironmentMapsTo value=XExpression |
		//	EnvironmentReference;
		public ParserRule getRule() { return rule; }

		//{EmptyEnvironment} "empty" | {EnvironmentMapping} key=XExpression EnvironmentMapsTo value=XExpression |
		//EnvironmentReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EmptyEnvironment} "empty"
		public Group getGroup_0() { return cGroup_0; }

		//{EmptyEnvironment}
		public Action getEmptyEnvironmentAction_0_0() { return cEmptyEnvironmentAction_0_0; }

		//"empty"
		public Keyword getEmptyKeyword_0_1() { return cEmptyKeyword_0_1; }

		//{EnvironmentMapping} key=XExpression EnvironmentMapsTo value=XExpression
		public Group getGroup_1() { return cGroup_1; }

		//{EnvironmentMapping}
		public Action getEnvironmentMappingAction_1_0() { return cEnvironmentMappingAction_1_0; }

		//key=XExpression
		public Assignment getKeyAssignment_1_1() { return cKeyAssignment_1_1; }

		//XExpression
		public RuleCall getKeyXExpressionParserRuleCall_1_1_0() { return cKeyXExpressionParserRuleCall_1_1_0; }

		//EnvironmentMapsTo
		public RuleCall getEnvironmentMapsToParserRuleCall_1_2() { return cEnvironmentMapsToParserRuleCall_1_2; }

		//value=XExpression
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_1_3_0() { return cValueXExpressionParserRuleCall_1_3_0; }

		//EnvironmentReference
		public RuleCall getEnvironmentReferenceParserRuleCall_2() { return cEnvironmentReferenceParserRuleCall_2; }
	}

	public class EnvironmentReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnvironmentReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEnvironmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEnvironmentEnvironmentCrossReference_1_0 = (CrossReference)cEnvironmentAssignment_1.eContents().get(0);
		private final RuleCall cEnvironmentEnvironmentIDTerminalRuleCall_1_0_1 = (RuleCall)cEnvironmentEnvironmentCrossReference_1_0.eContents().get(1);
		
		//EnvironmentReference:
		//	{EnvironmentReference} environment=[Environment];
		public ParserRule getRule() { return rule; }

		//{EnvironmentReference} environment=[Environment]
		public Group getGroup() { return cGroup; }

		//{EnvironmentReference}
		public Action getEnvironmentReferenceAction_0() { return cEnvironmentReferenceAction_0; }

		//environment=[Environment]
		public Assignment getEnvironmentAssignment_1() { return cEnvironmentAssignment_1; }

		//[Environment]
		public CrossReference getEnvironmentEnvironmentCrossReference_1_0() { return cEnvironmentEnvironmentCrossReference_1_0; }

		//ID
		public RuleCall getEnvironmentEnvironmentIDTerminalRuleCall_1_0_1() { return cEnvironmentEnvironmentIDTerminalRuleCall_1_0_1; }
	}

	public class EnvironmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Environment");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Environment:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class CommaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comma");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//Comma:
		//	",";
		public ParserRule getRule() { return rule; }

		//","
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}

	public class EnvironmentCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentComposition");
		private final RuleCall cCommaParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EnvironmentComposition:
		//	Comma;
		public ParserRule getRule() { return rule; }

		//Comma
		public RuleCall getCommaParserRuleCall() { return cCommaParserRuleCall; }
	}

	public class EnvironmentMapsToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnvironmentMapsTo");
		private final Keyword cLessThanSignHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//EnvironmentMapsTo:
		//	"<-";
		public ParserRule getRule() { return rule; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword() { return cLessThanSignHyphenMinusKeyword; }
	}

	public class ErrorSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cErrorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cErrorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cErrorXExpressionParserRuleCall_1_0 = (RuleCall)cErrorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSourceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSourceXExpressionParserRuleCall_2_1_0 = (RuleCall)cSourceAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFeatureKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeatureAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeatureXExpressionParserRuleCall_3_1_0 = (RuleCall)cFeatureAssignment_3_1.eContents().get(0);
		
		//ErrorSpecification:
		//	"error" error=XExpression ("source" source=XExpression)? ("feature" feature=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"error" error=XExpression ("source" source=XExpression)? ("feature" feature=XExpression)?
		public Group getGroup() { return cGroup; }

		//"error"
		public Keyword getErrorKeyword_0() { return cErrorKeyword_0; }

		//error=XExpression
		public Assignment getErrorAssignment_1() { return cErrorAssignment_1; }

		//XExpression
		public RuleCall getErrorXExpressionParserRuleCall_1_0() { return cErrorXExpressionParserRuleCall_1_0; }

		//("source" source=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"source"
		public Keyword getSourceKeyword_2_0() { return cSourceKeyword_2_0; }

		//source=XExpression
		public Assignment getSourceAssignment_2_1() { return cSourceAssignment_2_1; }

		//XExpression
		public RuleCall getSourceXExpressionParserRuleCall_2_1_0() { return cSourceXExpressionParserRuleCall_2_1_0; }

		//("feature" feature=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"feature"
		public Keyword getFeatureKeyword_3_0() { return cFeatureKeyword_3_0; }

		//feature=XExpression
		public Assignment getFeatureAssignment_3_1() { return cFeatureAssignment_3_1; }

		//XExpression
		public RuleCall getFeatureXExpressionParserRuleCall_3_1_0() { return cFeatureXExpressionParserRuleCall_3_1_0; }
	}

	public class JudgmentSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JudgmentSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cVerticalLineHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineTildeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVerticalLineTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cVerticalLineVerticalLineEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cVerticalLineEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVerticalLineVerticalLineGreaterThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cVerticalLineGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//JudgmentSymbol:
		//	"||-" | "|-" | "||~" | "|~" | "||=" | "|=" | "||>" | "|>";
		public ParserRule getRule() { return rule; }

		//"||-" | "|-" | "||~" | "|~" | "||=" | "|=" | "||>" | "|>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"||-"
		public Keyword getVerticalLineVerticalLineHyphenMinusKeyword_0() { return cVerticalLineVerticalLineHyphenMinusKeyword_0; }

		//"|-"
		public Keyword getVerticalLineHyphenMinusKeyword_1() { return cVerticalLineHyphenMinusKeyword_1; }

		//"||~"
		public Keyword getVerticalLineVerticalLineTildeKeyword_2() { return cVerticalLineVerticalLineTildeKeyword_2; }

		//"|~"
		public Keyword getVerticalLineTildeKeyword_3() { return cVerticalLineTildeKeyword_3; }

		//"||="
		public Keyword getVerticalLineVerticalLineEqualsSignKeyword_4() { return cVerticalLineVerticalLineEqualsSignKeyword_4; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_5() { return cVerticalLineEqualsSignKeyword_5; }

		//"||>"
		public Keyword getVerticalLineVerticalLineGreaterThanSignKeyword_6() { return cVerticalLineVerticalLineGreaterThanSignKeyword_6; }

		//"|>"
		public Keyword getVerticalLineGreaterThanSignKeyword_7() { return cVerticalLineGreaterThanSignKeyword_7; }
	}

	public class RelationSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationSymbol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignLessThanSignExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkGreaterThanSignGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignTildeExclamationMarkKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkTildeGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignColonKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cColonGreaterThanSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cLessThanSignLessThanSignKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cTildeTildeKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cLessThanSignVerticalLineKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cVerticalLineGreaterThanSignKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cLessThanSignHyphenMinusKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cLessThanSignTildeKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cTildeGreaterThanSignKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		
		//RelationSymbol:
		//	"<!" | "!>" | "<<!" | "!>>" | "<~!" | "!~>" | ":" | "<:" | ":>" | "<<" | ">>" | "~~" | "<|" | "|>" | "<-" | "-->" |
		//	"<~" | "~>";
		public ParserRule getRule() { return rule; }

		//"<!" | "!>" | "<<!" | "!>>" | "<~!" | "!~>" | ":" | "<:" | ":>" | "<<" | ">>" | "~~" | "<|" | "|>" | "<-" | "-->" | "<~"
		//| "~>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<!"
		public Keyword getLessThanSignExclamationMarkKeyword_0() { return cLessThanSignExclamationMarkKeyword_0; }

		//"!>"
		public Keyword getExclamationMarkGreaterThanSignKeyword_1() { return cExclamationMarkGreaterThanSignKeyword_1; }

		//"<<!"
		public Keyword getLessThanSignLessThanSignExclamationMarkKeyword_2() { return cLessThanSignLessThanSignExclamationMarkKeyword_2; }

		//"!>>"
		public Keyword getExclamationMarkGreaterThanSignGreaterThanSignKeyword_3() { return cExclamationMarkGreaterThanSignGreaterThanSignKeyword_3; }

		//"<~!"
		public Keyword getLessThanSignTildeExclamationMarkKeyword_4() { return cLessThanSignTildeExclamationMarkKeyword_4; }

		//"!~>"
		public Keyword getExclamationMarkTildeGreaterThanSignKeyword_5() { return cExclamationMarkTildeGreaterThanSignKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//"<:"
		public Keyword getLessThanSignColonKeyword_7() { return cLessThanSignColonKeyword_7; }

		//":>"
		public Keyword getColonGreaterThanSignKeyword_8() { return cColonGreaterThanSignKeyword_8; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_9() { return cLessThanSignLessThanSignKeyword_9; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_10() { return cGreaterThanSignGreaterThanSignKeyword_10; }

		//"~~"
		public Keyword getTildeTildeKeyword_11() { return cTildeTildeKeyword_11; }

		//"<|"
		public Keyword getLessThanSignVerticalLineKeyword_12() { return cLessThanSignVerticalLineKeyword_12; }

		//"|>"
		public Keyword getVerticalLineGreaterThanSignKeyword_13() { return cVerticalLineGreaterThanSignKeyword_13; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_14() { return cLessThanSignHyphenMinusKeyword_14; }

		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_15() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_15; }

		//"<~"
		public Keyword getLessThanSignTildeKeyword_16() { return cLessThanSignTildeKeyword_16; }

		//"~>"
		public Keyword getTildeGreaterThanSignKeyword_17() { return cTildeGreaterThanSignKeyword_17; }
	}

	public class RuleConclusionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleConclusionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cRuleParameterParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionInConclusionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RuleConclusionElement:
		//	=> (RuleParameter) | ExpressionInConclusion;
		public ParserRule getRule() { return rule; }

		//=> (RuleParameter) | ExpressionInConclusion
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> (RuleParameter)
		public Group getGroup_0() { return cGroup_0; }

		//RuleParameter
		public RuleCall getRuleParameterParserRuleCall_0_0() { return cRuleParameterParserRuleCall_0_0; }

		//ExpressionInConclusion
		public RuleCall getExpressionInConclusionParserRuleCall_1() { return cExpressionInConclusionParserRuleCall_1; }
	}

	public class RuleParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleParameter");
		private final Assignment cParameterAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cParameterFullJvmFormalParameterParserRuleCall_0 = (RuleCall)cParameterAssignment.eContents().get(0);
		
		//RuleParameter:
		//	parameter=FullJvmFormalParameter;
		public ParserRule getRule() { return rule; }

		//parameter=FullJvmFormalParameter
		public Assignment getParameterAssignment() { return cParameterAssignment; }

		//FullJvmFormalParameter
		public RuleCall getParameterFullJvmFormalParameterParserRuleCall_0() { return cParameterFullJvmFormalParameterParserRuleCall_0; }
	}

	public class ExpressionInConclusionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionInConclusion");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionXExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ExpressionInConclusion:
		//	expression=XExpression;
		public ParserRule getRule() { return rule; }

		//expression=XExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_0() { return cExpressionXExpressionParserRuleCall_0; }
	}
	
	
	private XsemanticsSystemElements pXsemanticsSystem;
	private InjectedElements pInjected;
	private AuxiliaryDescriptionElements pAuxiliaryDescription;
	private JudgmentDescriptionElements pJudgmentDescription;
	private JudgmentParameterElements pJudgmentParameter;
	private AuxiliaryFunctionElements pAuxiliaryFunction;
	private RuleElements pRule;
	private AxiomElements pAxiom;
	private RuleWithPremisesElements pRuleWithPremises;
	private CheckRuleElements pCheckRule;
	private RuleConclusionElements pRuleConclusion;
	private XExpressionInsideBlockElements pXExpressionInsideBlock;
	private PremiseExpressionElements pPremiseExpression;
	private TerminalPremiseExpressionElements pTerminalPremiseExpression;
	private XLiteralElements pXLiteral;
	private EnvironmentAccessElements pEnvironmentAccess;
	private RuleInvocationElements pRuleInvocation;
	private RuleInvocationExpressionElements pRuleInvocationExpression;
	private EnvironmentSpecificationElements pEnvironmentSpecification;
	private TerminalEnvironmentSpecificationElements pTerminalEnvironmentSpecification;
	private EnvironmentReferenceElements pEnvironmentReference;
	private EnvironmentElements pEnvironment;
	private CommaElements pComma;
	private EnvironmentCompositionElements pEnvironmentComposition;
	private EnvironmentMapsToElements pEnvironmentMapsTo;
	private ErrorSpecificationElements pErrorSpecification;
	private JudgmentSymbolElements pJudgmentSymbol;
	private RelationSymbolElements pRelationSymbol;
	private RuleConclusionElementElements pRuleConclusionElement;
	private RuleParameterElements pRuleParameter;
	private ExpressionInConclusionElements pExpressionInConclusion;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public XsemanticsGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("it.xsemantics.dsl.Xsemantics".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//XsemanticsSystem:
	//	"system" name=QualifiedName ("extends" superSystem=JvmParameterizedTypeReference)? ("validatorExtends"
	//	validatorExtends=JvmParameterizedTypeReference)? importSection=XImportSection? injections+=Injected* ("auxiliary" "{"
	//	auxiliaryDescriptions+=AuxiliaryDescription+ "}")? ("judgments" "{" judgmentDescriptions+=JudgmentDescription+ "}")?
	//	auxiliaryFunctions+=AuxiliaryFunction* rules+=Rule* checkrules+=CheckRule*;
	public XsemanticsSystemElements getXsemanticsSystemAccess() {
		return (pXsemanticsSystem != null) ? pXsemanticsSystem : (pXsemanticsSystem = new XsemanticsSystemElements());
	}
	
	public ParserRule getXsemanticsSystemRule() {
		return getXsemanticsSystemAccess().getRule();
	}

	//Injected:
	//	"inject" type=JvmTypeReference name=ValidID;
	public InjectedElements getInjectedAccess() {
		return (pInjected != null) ? pInjected : (pInjected = new InjectedElements());
	}
	
	public ParserRule getInjectedRule() {
		return getInjectedAccess().getRule();
	}

	//AuxiliaryDescription:
	//	name=ID "(" (parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)? ")" (":"
	//	type=JvmTypeReference)? error=ErrorSpecification?;
	public AuxiliaryDescriptionElements getAuxiliaryDescriptionAccess() {
		return (pAuxiliaryDescription != null) ? pAuxiliaryDescription : (pAuxiliaryDescription = new AuxiliaryDescriptionElements());
	}
	
	public ParserRule getAuxiliaryDescriptionRule() {
		return getAuxiliaryDescriptionAccess().getRule();
	}

	//JudgmentDescription:
	//	override?="override"? name=ID judgmentSymbol=JudgmentSymbol judgmentParameters+=JudgmentParameter
	//	(relationSymbols+=RelationSymbol judgmentParameters+=JudgmentParameter)* error=ErrorSpecification?;
	public JudgmentDescriptionElements getJudgmentDescriptionAccess() {
		return (pJudgmentDescription != null) ? pJudgmentDescription : (pJudgmentDescription = new JudgmentDescriptionElements());
	}
	
	public ParserRule getJudgmentDescriptionRule() {
		return getJudgmentDescriptionAccess().getRule();
	}

	//JudgmentParameter:
	//	{OutputParameter} "output" jvmTypeReference=JvmTypeReference | {InputParameter} parameter=FullJvmFormalParameter;
	public JudgmentParameterElements getJudgmentParameterAccess() {
		return (pJudgmentParameter != null) ? pJudgmentParameter : (pJudgmentParameter = new JudgmentParameterElements());
	}
	
	public ParserRule getJudgmentParameterRule() {
		return getJudgmentParameterAccess().getRule();
	}

	//AuxiliaryFunction:
	//	"auxiliary" name=ID "(" (parameters+=FullJvmFormalParameter ("," parameters+=FullJvmFormalParameter)*)? ")"
	//	body=XExpression;
	public AuxiliaryFunctionElements getAuxiliaryFunctionAccess() {
		return (pAuxiliaryFunction != null) ? pAuxiliaryFunction : (pAuxiliaryFunction = new AuxiliaryFunctionElements());
	}
	
	public ParserRule getAuxiliaryFunctionRule() {
		return getAuxiliaryFunctionAccess().getRule();
	}

	//Rule:
	//	Axiom | RuleWithPremises;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//Axiom:
	//	override?="override"? "axiom" name=ID conclusion=RuleConclusion;
	public AxiomElements getAxiomAccess() {
		return (pAxiom != null) ? pAxiom : (pAxiom = new AxiomElements());
	}
	
	public ParserRule getAxiomRule() {
		return getAxiomAccess().getRule();
	}

	//RuleWithPremises:
	//	override?="override"? "rule" name=ID "derives"? conclusion=RuleConclusion "from" premises=XBlockExpression;
	public RuleWithPremisesElements getRuleWithPremisesAccess() {
		return (pRuleWithPremises != null) ? pRuleWithPremises : (pRuleWithPremises = new RuleWithPremisesElements());
	}
	
	public ParserRule getRuleWithPremisesRule() {
		return getRuleWithPremisesAccess().getRule();
	}

	//CheckRule:
	//	override?="override"? "checkrule" name=ID "for" element=RuleParameter "from" premises=XBlockExpression;
	public CheckRuleElements getCheckRuleAccess() {
		return (pCheckRule != null) ? pCheckRule : (pCheckRule = new CheckRuleElements());
	}
	
	public ParserRule getCheckRuleRule() {
		return getCheckRuleAccess().getRule();
	}

	//RuleConclusion:
	//	environment=Environment judgmentSymbol=JudgmentSymbol conclusionElements+=RuleConclusionElement
	//	(relationSymbols+=RelationSymbol conclusionElements+=RuleConclusionElement)* error=ErrorSpecification?;
	public RuleConclusionElements getRuleConclusionAccess() {
		return (pRuleConclusion != null) ? pRuleConclusion : (pRuleConclusion = new RuleConclusionElements());
	}
	
	public ParserRule getRuleConclusionRule() {
		return getRuleConclusionAccess().getRule();
	}

	//XExpressionInsideBlock returns xbase::XExpression:
	//	PremiseExpression;
	public XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return (pXExpressionInsideBlock != null) ? pXExpressionInsideBlock : (pXExpressionInsideBlock = new XExpressionInsideBlockElements());
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//PremiseExpression returns xbase::XExpression:
	//	TerminalPremiseExpression => ({OrExpression.branches+=current} "or" branches+=XExpressionInsideBlock)*;
	public PremiseExpressionElements getPremiseExpressionAccess() {
		return (pPremiseExpression != null) ? pPremiseExpression : (pPremiseExpression = new PremiseExpressionElements());
	}
	
	public ParserRule getPremiseExpressionRule() {
		return getPremiseExpressionAccess().getRule();
	}

	//TerminalPremiseExpression returns xbase::XExpression:
	//	RuleInvocation | {Fail} "fail" error=ErrorSpecification? | XVariableDeclaration | XExpression;
	public TerminalPremiseExpressionElements getTerminalPremiseExpressionAccess() {
		return (pTerminalPremiseExpression != null) ? pTerminalPremiseExpression : (pTerminalPremiseExpression = new TerminalPremiseExpressionElements());
	}
	
	public ParserRule getTerminalPremiseExpressionRule() {
		return getTerminalPremiseExpressionAccess().getRule();
	}

	//XLiteral returns xbase::XExpression:
	//	EnvironmentAccess | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XLiteralElements getXLiteralAccess() {
		return (pXLiteral != null) ? pXLiteral : (pXLiteral = new XLiteralElements());
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//EnvironmentAccess returns xbase::XExpression:
	//	{EnvironmentAccess} "env" "(" environment=[Environment] "," argument=XExpression "," type=JvmTypeReference ")";
	public EnvironmentAccessElements getEnvironmentAccessAccess() {
		return (pEnvironmentAccess != null) ? pEnvironmentAccess : (pEnvironmentAccess = new EnvironmentAccessElements());
	}
	
	public ParserRule getEnvironmentAccessRule() {
		return getEnvironmentAccessAccess().getRule();
	}

	////	(error=ErrorSpecification)? we don't need it: we can use or fail error...
	//RuleInvocation:
	//	=> environment=EnvironmentSpecification judgmentSymbol=JudgmentSymbol expressions+=RuleInvocationExpression
	//	(relationSymbols+=RelationSymbol expressions+=RuleInvocationExpression)*;
	public RuleInvocationElements getRuleInvocationAccess() {
		return (pRuleInvocation != null) ? pRuleInvocation : (pRuleInvocation = new RuleInvocationElements());
	}
	
	public ParserRule getRuleInvocationRule() {
		return getRuleInvocationAccess().getRule();
	}

	//RuleInvocationExpression:
	//	=> expression=(XVariableDeclaration | XExpression);
	public RuleInvocationExpressionElements getRuleInvocationExpressionAccess() {
		return (pRuleInvocationExpression != null) ? pRuleInvocationExpression : (pRuleInvocationExpression = new RuleInvocationExpressionElements());
	}
	
	public ParserRule getRuleInvocationExpressionRule() {
		return getRuleInvocationExpressionAccess().getRule();
	}

	//EnvironmentSpecification:
	//	TerminalEnvironmentSpecification => ({EnvironmentComposition.currentEnvironment=current} EnvironmentComposition
	//	subEnvironment=EnvironmentSpecification)*;
	public EnvironmentSpecificationElements getEnvironmentSpecificationAccess() {
		return (pEnvironmentSpecification != null) ? pEnvironmentSpecification : (pEnvironmentSpecification = new EnvironmentSpecificationElements());
	}
	
	public ParserRule getEnvironmentSpecificationRule() {
		return getEnvironmentSpecificationAccess().getRule();
	}

	//TerminalEnvironmentSpecification returns EnvironmentSpecification:
	//	{EmptyEnvironment} "empty" | {EnvironmentMapping} key=XExpression EnvironmentMapsTo value=XExpression |
	//	EnvironmentReference;
	public TerminalEnvironmentSpecificationElements getTerminalEnvironmentSpecificationAccess() {
		return (pTerminalEnvironmentSpecification != null) ? pTerminalEnvironmentSpecification : (pTerminalEnvironmentSpecification = new TerminalEnvironmentSpecificationElements());
	}
	
	public ParserRule getTerminalEnvironmentSpecificationRule() {
		return getTerminalEnvironmentSpecificationAccess().getRule();
	}

	//EnvironmentReference:
	//	{EnvironmentReference} environment=[Environment];
	public EnvironmentReferenceElements getEnvironmentReferenceAccess() {
		return (pEnvironmentReference != null) ? pEnvironmentReference : (pEnvironmentReference = new EnvironmentReferenceElements());
	}
	
	public ParserRule getEnvironmentReferenceRule() {
		return getEnvironmentReferenceAccess().getRule();
	}

	//Environment:
	//	name=ID;
	public EnvironmentElements getEnvironmentAccess() {
		return (pEnvironment != null) ? pEnvironment : (pEnvironment = new EnvironmentElements());
	}
	
	public ParserRule getEnvironmentRule() {
		return getEnvironmentAccess().getRule();
	}

	//Comma:
	//	",";
	public CommaElements getCommaAccess() {
		return (pComma != null) ? pComma : (pComma = new CommaElements());
	}
	
	public ParserRule getCommaRule() {
		return getCommaAccess().getRule();
	}

	//EnvironmentComposition:
	//	Comma;
	public EnvironmentCompositionElements getEnvironmentCompositionAccess() {
		return (pEnvironmentComposition != null) ? pEnvironmentComposition : (pEnvironmentComposition = new EnvironmentCompositionElements());
	}
	
	public ParserRule getEnvironmentCompositionRule() {
		return getEnvironmentCompositionAccess().getRule();
	}

	//EnvironmentMapsTo:
	//	"<-";
	public EnvironmentMapsToElements getEnvironmentMapsToAccess() {
		return (pEnvironmentMapsTo != null) ? pEnvironmentMapsTo : (pEnvironmentMapsTo = new EnvironmentMapsToElements());
	}
	
	public ParserRule getEnvironmentMapsToRule() {
		return getEnvironmentMapsToAccess().getRule();
	}

	//ErrorSpecification:
	//	"error" error=XExpression ("source" source=XExpression)? ("feature" feature=XExpression)?;
	public ErrorSpecificationElements getErrorSpecificationAccess() {
		return (pErrorSpecification != null) ? pErrorSpecification : (pErrorSpecification = new ErrorSpecificationElements());
	}
	
	public ParserRule getErrorSpecificationRule() {
		return getErrorSpecificationAccess().getRule();
	}

	//JudgmentSymbol:
	//	"||-" | "|-" | "||~" | "|~" | "||=" | "|=" | "||>" | "|>";
	public JudgmentSymbolElements getJudgmentSymbolAccess() {
		return (pJudgmentSymbol != null) ? pJudgmentSymbol : (pJudgmentSymbol = new JudgmentSymbolElements());
	}
	
	public ParserRule getJudgmentSymbolRule() {
		return getJudgmentSymbolAccess().getRule();
	}

	//RelationSymbol:
	//	"<!" | "!>" | "<<!" | "!>>" | "<~!" | "!~>" | ":" | "<:" | ":>" | "<<" | ">>" | "~~" | "<|" | "|>" | "<-" | "-->" |
	//	"<~" | "~>";
	public RelationSymbolElements getRelationSymbolAccess() {
		return (pRelationSymbol != null) ? pRelationSymbol : (pRelationSymbol = new RelationSymbolElements());
	}
	
	public ParserRule getRelationSymbolRule() {
		return getRelationSymbolAccess().getRule();
	}

	//RuleConclusionElement:
	//	=> (RuleParameter) | ExpressionInConclusion;
	public RuleConclusionElementElements getRuleConclusionElementAccess() {
		return (pRuleConclusionElement != null) ? pRuleConclusionElement : (pRuleConclusionElement = new RuleConclusionElementElements());
	}
	
	public ParserRule getRuleConclusionElementRule() {
		return getRuleConclusionElementAccess().getRule();
	}

	//RuleParameter:
	//	parameter=FullJvmFormalParameter;
	public RuleParameterElements getRuleParameterAccess() {
		return (pRuleParameter != null) ? pRuleParameter : (pRuleParameter = new RuleParameterElements());
	}
	
	public ParserRule getRuleParameterRule() {
		return getRuleParameterAccess().getRule();
	}

	//ExpressionInConclusion:
	//	expression=XExpression;
	public ExpressionInConclusionElements getExpressionInConclusionAccess() {
		return (pExpressionInConclusion != null) ? pExpressionInConclusion : (pExpressionInConclusion = new ExpressionInConclusionElements());
	}
	
	public ParserRule getExpressionInConclusionRule() {
		return getExpressionInConclusionAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * /
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression (=>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|FeatureCallID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedName] "." "*" |
	//	importedType=[JvmDeclaredType|QualifiedName] | importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
